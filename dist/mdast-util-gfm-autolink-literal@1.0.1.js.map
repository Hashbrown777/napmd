{"version":3,"file":"mdast-util-gfm-autolink-literal@1.0.1.js","sources":["../node_modules/mdast-util-gfm-autolink-literal/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown/lib/types.js').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n * @typedef {import('mdast-util-find-and-replace').PhrasingContent} PhrasingContent\n */\n\nimport {ccount} from 'ccount'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\n\nconst inConstruct = 'phrasing'\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/** @type {FromMarkdownExtension} */\nexport const gfmAutolinkLiteralFromMarkdown = {\n  transforms: [transformGfmAutolinkLiterals],\n  enter: {\n    literalAutolink: enterLiteralAutolink,\n    literalAutolinkEmail: enterLiteralAutolinkValue,\n    literalAutolinkHttp: enterLiteralAutolinkValue,\n    literalAutolinkWww: enterLiteralAutolinkValue\n  },\n  exit: {\n    literalAutolink: exitLiteralAutolink,\n    literalAutolinkEmail: exitLiteralAutolinkEmail,\n    literalAutolinkHttp: exitLiteralAutolinkHttp,\n    literalAutolinkWww: exitLiteralAutolinkWww\n  }\n}\n\n/** @type {ToMarkdownExtension} */\nexport const gfmAutolinkLiteralToMarkdown = {\n  unsafe: [\n    {\n      character: '@',\n      before: '[+\\\\-.\\\\w]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {\n      character: '.',\n      before: '[Ww]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {character: ':', before: '[ps]', after: '\\\\/', inConstruct, notInConstruct}\n  ]\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = /** @type {Link} */ (this.stack[this.stack.length - 1])\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {PhrasingContent} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[_-\\d]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string|undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n  /** @type {number} */\n  let closingParenIndex\n  /** @type {number} */\n  let openingParens\n  /** @type {number} */\n  let closingParens\n  /** @type {string|undefined} */\n  let trail\n\n  if (trailExec) {\n    url = url.slice(0, trailExec.index)\n    trail = trailExec[0]\n    closingParenIndex = trail.indexOf(')')\n    openingParens = ccount(url, '(')\n    closingParens = ccount(url, ')')\n\n    while (closingParenIndex !== -1 && openingParens > closingParens) {\n      url += trail.slice(0, closingParenIndex + 1)\n      trail = trail.slice(closingParenIndex + 1)\n      closingParenIndex = trail.indexOf(')')\n      closingParens++\n    }\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n"],"names":["inConstruct","notInConstruct","gfmAutolinkLiteralFromMarkdown","transforms","tree","findAndReplace","findUrl","findEmail","ignore","enter","literalAutolink","token","this","type","title","url","children","literalAutolinkEmail","enterLiteralAutolinkValue","literalAutolinkHttp","literalAutolinkWww","exit","config","autolinkEmail","call","autolinkProtocol","data","stack","length","sliceSerialize","gfmAutolinkLiteralToMarkdown","unsafe","character","before","after","_","protocol","domain","path","match","prefix","previous","test","parts","split","isCorrectDomain","trailExec","exec","closingParenIndex","openingParens","closingParens","trail","slice","index","indexOf","ccount","splitUrl","result","value","atext","label","email","code","input","charCodeAt","unicodeWhitespace","unicodePunctuation"],"mappings":"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"}