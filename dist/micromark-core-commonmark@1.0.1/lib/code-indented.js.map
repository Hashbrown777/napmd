{"version":3,"file":"code-indented.js","sources":["../../../node_modules/micromark-core-commonmark/lib/code-indented.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n/** @type {Construct} */\n\nconst indentedContent = {\n  tokenize: tokenizeIndentedContent,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeIndented')\n    return factorySpace(effects, afterStartPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterStartPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? afterPrefix(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(indentedContent, afterPrefix, after)(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return content(code)\n  }\n  /** @type {State} */\n\n  function content(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return afterPrefix(code)\n    }\n\n    effects.consume(code)\n    return content\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeIndented')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeIndentedContent(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // If this is a lazy line, it canâ€™t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? start(code)\n      : nok(code)\n  }\n}\n"],"names":["codeIndented","name","tokenize","effects","ok","nok","self","this","code","enter","factorySpace","afterStartPrefix","tail","events","length","type","sliceSerialize","afterPrefix","after","markdownLineEnding","attempt","indentedContent","content","exit","consume","start","parser","lazy","now","line","partial"],"mappings":"+FAWaA,EAAe,CAC1BC,KAAM,eACNC,SAUF,SAA8BC,EAASC,EAAIC,GACzC,MAAMC,EAAOC,KACb,OAGA,SAAeC,GAEb,OADAL,EAAQM,MAAM,gBACPC,eAAaP,EAASQ,EAAkB,aAAc,EAAtDD,CAA6DF,IAItE,SAASG,EAAiBH,GACxB,MAAMI,EAAON,EAAKO,OAAOP,EAAKO,OAAOC,OAAS,GAC9C,OAAOF,GACY,eAAjBA,EAAK,GAAGG,MACRH,EAAK,GAAGI,eAAeJ,EAAK,IAAI,GAAME,QAAU,EAC9CG,EAAYT,GACZH,EAAIG,GAIV,SAASS,EAAYT,GACnB,OAAa,OAATA,EACKU,EAAMV,GAGXW,qBAAmBX,GACdL,EAAQiB,QAAQC,EAAiBJ,EAAaC,EAA9Cf,CAAqDK,IAG9DL,EAAQM,MAAM,iBACPa,EAAQd,IAIjB,SAASc,EAAQd,GACf,OAAa,OAATA,GAAiBW,qBAAmBX,IACtCL,EAAQoB,KAAK,iBACNN,EAAYT,KAGrBL,EAAQqB,QAAQhB,GACTc,GAIT,SAASJ,EAAMV,GAEb,OADAL,EAAQoB,KAAK,gBACNnB,EAAGI,MAtDRa,EAAkB,CACtBnB,SA0DF,SAAiCC,EAASC,EAAIC,GAC5C,MAAMC,EAAOC,KACb,OAAOkB,EAGP,SAASA,EAAMjB,GAEb,OAAIF,EAAKoB,OAAOC,KAAKrB,EAAKsB,MAAMC,MACvBxB,EAAIG,GAGTW,qBAAmBX,IACrBL,EAAQM,MAAM,cACdN,EAAQqB,QAAQhB,GAChBL,EAAQoB,KAAK,cACNE,GAGFf,eAAaP,EAASc,EAAa,aAAc,EAAjDP,CAAwDF,GAIjE,SAASS,EAAYT,GACnB,MAAMI,EAAON,EAAKO,OAAOP,EAAKO,OAAOC,OAAS,GAC9C,OAAOF,GACY,eAAjBA,EAAK,GAAGG,MACRH,EAAK,GAAGI,eAAeJ,EAAK,IAAI,GAAME,QAAU,EAC9CV,EAAGI,GACHW,qBAAmBX,GACnBiB,EAAMjB,GACNH,EAAIG,KAvFVsB,SAAS"}