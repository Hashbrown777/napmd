define(["exports","micromark-factory-space","micromark-util-character"],(function(e,t,n){const i={name:"setextUnderline",tokenize:function(e,i,r){const s=this;let a,c,o=s.events.length;for(;o--;)if("lineEnding"!==s.events[o][1].type&&"linePrefix"!==s.events[o][1].type&&"content"!==s.events[o][1].type){c="paragraph"===s.events[o][1].type;break}return function(t){if(!s.parser.lazy[s.now().line]&&(s.interrupt||c))return e.enter("setextHeadingLine"),e.enter("setextHeadingLineSequence"),a=t,p(t);return r(t)};function p(n){return n===a?(e.consume(n),p):(e.exit("setextHeadingLineSequence"),t.factorySpace(e,l,"lineSuffix")(n))}function l(t){return null===t||n.markdownLineEnding(t)?(e.exit("setextHeadingLine"),i(t)):r(t)}},resolveTo:function(e,t){let n,i,r,s=e.length;for(;s--;)if("enter"===e[s][0]){if("content"===e[s][1].type){n=s;break}"paragraph"===e[s][1].type&&(i=s)}else"content"===e[s][1].type&&e.splice(s,1),r||"definition"!==e[s][1].type||(r=s);const a={type:"setextHeading",start:Object.assign({},e[i][1].start),end:Object.assign({},e[e.length-1][1].end)};e[i][1].type="setextHeadingText",r?(e.splice(i,0,["enter",a,t]),e.splice(r+1,0,["exit",e[n][1],t]),e[n][1].end=Object.assign({},e[r][1].end)):e[n][1]=a;return e.push(["exit",a,t]),e}};e.setextUnderline=i,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=setext-underline.js.map
