define(["exports","micromark-util-character"],(function(e,n){const t={name:"codeText",tokenize:function(e,t,c){let i,o,r=0;return function(n){return e.enter("codeText"),e.enter("codeTextSequence"),d(n)};function d(n){return 96===n?(e.consume(n),r++,d):(e.exit("codeTextSequence"),u(n))}function u(t){return null===t?c(t):96===t?(o=e.enter("codeTextSequence"),i=0,x(t)):32===t?(e.enter("space"),e.consume(t),e.exit("space"),u):n.markdownLineEnding(t)?(e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),u):(e.enter("codeTextData"),a(t))}function a(t){return null===t||32===t||96===t||n.markdownLineEnding(t)?(e.exit("codeTextData"),u(t)):(e.consume(t),a)}function x(n){return 96===n?(e.consume(n),i++,x):i===r?(e.exit("codeTextSequence"),e.exit("codeText"),t(n)):(o.type="codeTextData",a(n))}},resolve:function(e){let n,t,c=e.length-4,i=3;if(!("lineEnding"!==e[i][1].type&&"space"!==e[i][1].type||"lineEnding"!==e[c][1].type&&"space"!==e[c][1].type))for(n=i;++n<c;)if("codeTextData"===e[n][1].type){e[i][1].type="codeTextPadding",e[c][1].type="codeTextPadding",i+=2,c-=2;break}n=i-1,c++;for(;++n<=c;)void 0===t?n!==c&&"lineEnding"!==e[n][1].type&&(t=n):n!==c&&"lineEnding"!==e[n][1].type||(e[t][1].type="codeTextData",n!==t+2&&(e[t][1].end=e[n-1][1].end,e.splice(t+2,n-t-2),c-=n-t-2,n=t+2),t=void 0);return e},previous:function(e){return 96!==e||"characterEscape"===this.events[this.events.length-1][1].type}};e.codeText=t,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=code-text.js.map
