{"version":3,"file":"micromark-factory-destination@1.0.0.js","sources":["../node_modules/micromark-factory-destination/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} literalType\n * @param {string} literalMarkerType\n * @param {string} rawType\n * @param {string} stringType\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return destinationEnclosedBefore\n    }\n\n    if (code === null || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationRaw(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return destinationEnclosedBefore(code)\n    }\n\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? destinationEnclosedEscape : destinationEnclosed\n  }\n  /** @type {State} */\n\n  function destinationEnclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return destinationEnclosed\n    }\n\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationRaw(code) {\n    if (code === 40) {\n      if (++balance > limit) return nok(code)\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === 41) {\n      if (!balance--) {\n        effects.exit('chunkString')\n        effects.exit(stringType)\n        effects.exit(rawType)\n        effects.exit(type)\n        return ok(code)\n      }\n\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      if (balance) return nok(code)\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n\n    if (asciiControl(code)) return nok(code)\n    effects.consume(code)\n    return code === 92 ? destinationRawEscape : destinationRaw\n  }\n  /** @type {State} */\n\n  function destinationRawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    return destinationRaw(code)\n  }\n}\n"],"names":["effects","ok","nok","type","literalType","literalMarkerType","rawType","stringType","max","limit","Number","POSITIVE_INFINITY","balance","code","enter","consume","exit","destinationEnclosedBefore","asciiControl","contentType","destinationRaw","destinationEnclosed","markdownLineEnding","destinationEnclosedEscape","markdownLineEndingOrSpace","destinationRawEscape"],"mappings":"kFAuBO,SACLA,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,MAAMC,EAAQD,GAAOE,OAAOC,kBAC5B,IAAIC,EAAU,EACd,OAGA,SAAeC,GACb,GAAa,KAATA,EAMF,OALAb,EAAQc,MAAMX,GACdH,EAAQc,MAAMV,GACdJ,EAAQc,MAAMT,GACdL,EAAQe,QAAQF,GAChBb,EAAQgB,KAAKX,GACNY,EAGT,GAAa,OAATJ,GAA0B,KAATA,GAAeK,eAAaL,GAC/C,OAAOX,EAAIW,GASb,OANAb,EAAQc,MAAMX,GACdH,EAAQc,MAAMR,GACdN,EAAQc,MAAMP,GACdP,EAAQc,MAAM,cAAe,CAC3BK,YAAa,WAERC,EAAeP,IAIxB,SAASI,EAA0BJ,GACjC,OAAa,KAATA,GACFb,EAAQc,MAAMT,GACdL,EAAQe,QAAQF,GAChBb,EAAQgB,KAAKX,GACbL,EAAQgB,KAAKZ,GACbJ,EAAQgB,KAAKb,GACNF,IAGTD,EAAQc,MAAMP,GACdP,EAAQc,MAAM,cAAe,CAC3BK,YAAa,WAERE,EAAoBR,IAI7B,SAASQ,EAAoBR,GAC3B,OAAa,KAATA,GACFb,EAAQgB,KAAK,eACbhB,EAAQgB,KAAKT,GACNU,EAA0BJ,IAGtB,OAATA,GAA0B,KAATA,GAAeS,qBAAmBT,GAC9CX,EAAIW,IAGbb,EAAQe,QAAQF,GACA,KAATA,EAAcU,EAA4BF,GAInD,SAASE,EAA0BV,GACjC,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCb,EAAQe,QAAQF,GACTQ,GAGFA,EAAoBR,GAI7B,SAASO,EAAeP,GACtB,OAAa,KAATA,IACID,EAAUH,EAAcP,EAAIW,IAClCb,EAAQe,QAAQF,GACTO,GAGI,KAATP,EACGD,KAQLZ,EAAQe,QAAQF,GACTO,IARLpB,EAAQgB,KAAK,eACbhB,EAAQgB,KAAKT,GACbP,EAAQgB,KAAKV,GACbN,EAAQgB,KAAKb,GACNF,EAAGY,IAOD,OAATA,GAAiBW,4BAA0BX,GACzCD,EAAgBV,EAAIW,IACxBb,EAAQgB,KAAK,eACbhB,EAAQgB,KAAKT,GACbP,EAAQgB,KAAKV,GACbN,EAAQgB,KAAKb,GACNF,EAAGY,IAGRK,eAAaL,GAAcX,EAAIW,IACnCb,EAAQe,QAAQF,GACA,KAATA,EAAcY,EAAuBL,GAI9C,SAASK,EAAqBZ,GAC5B,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCb,EAAQe,QAAQF,GACTO,GAGFA,EAAeP"}