{"version":3,"file":"html.js","sources":["../../../node_modules/micromark-extension-gfm-autolink-literal/lib/html.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').Handle} Handle\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n * @typedef {import('micromark-util-types').Token} Token\n */\nimport {sanitizeUri} from 'micromark-util-sanitize-uri'\n/** @type {HtmlExtension} */\n\nexport const gfmAutolinkLiteralHtml = {\n  exit: {\n    literalAutolinkEmail,\n    literalAutolinkHttp,\n    literalAutolinkWww\n  }\n}\n/** @type {Handle} */\n\nfunction literalAutolinkWww(token) {\n  anchorFromToken.call(this, token, 'http://')\n}\n/** @type {Handle} */\n\nfunction literalAutolinkEmail(token) {\n  anchorFromToken.call(this, token, 'mailto:')\n}\n/** @type {Handle} */\n\nfunction literalAutolinkHttp(token) {\n  anchorFromToken.call(this, token)\n}\n/**\n * @this CompileContext\n * @param {Token} token\n * @param {string} [protocol]\n * @returns {void}\n */\n\nfunction anchorFromToken(token, protocol) {\n  const url = this.sliceSerialize(token)\n  this.tag('<a href=\"' + sanitizeUri((protocol || '') + url) + '\">')\n  this.raw(this.encode(url))\n  this.tag('</a>')\n}\n"],"names":["gfmAutolinkLiteralHtml","exit","literalAutolinkEmail","token","anchorFromToken","call","this","literalAutolinkHttp","literalAutolinkWww","protocol","url","sliceSerialize","tag","sanitizeUri","raw","encode"],"mappings":"sEASaA,EAAyB,CACpCC,KAAM,CACJC,qBAYJ,SAA8BC,GAC5BC,EAAgBC,KAAKC,KAAMH,EAAO,YAZhCI,oBAgBJ,SAA6BJ,GAC3BC,EAAgBC,KAAKC,KAAMH,IAhBzBK,mBAKJ,SAA4BL,GAC1BC,EAAgBC,KAAKC,KAAMH,EAAO,cAmBpC,SAASC,EAAgBD,EAAOM,GAC9B,MAAMC,EAAMJ,KAAKK,eAAeR,GAChCG,KAAKM,IAAI,YAAcC,eAAaJ,GAAY,IAAMC,GAAO,MAC7DJ,KAAKQ,IAAIR,KAAKS,OAAOL,IACrBJ,KAAKM,IAAI"}