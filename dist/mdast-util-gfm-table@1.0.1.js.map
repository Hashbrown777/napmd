{"version":3,"file":"mdast-util-gfm-table@1.0.1.js","sources":["../node_modules/mdast-util-gfm-table/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').AlignType} AlignType\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('markdown-table').MarkdownTableOptions} MarkdownTableOptions\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Context} ToMarkdownContext\n *\n * @typedef Options\n * @property {boolean} [tableCellPadding=true]\n * @property {boolean} [tablePipeAlign=true]\n * @property {MarkdownTableOptions['stringLength']} [stringLength]\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {inlineCode} from 'mdast-util-to-markdown/lib/handle/inline-code.js'\nimport {markdownTable} from 'markdown-table'\n\n/** @type {FromMarkdownExtension} */\nexport const gfmTableFromMarkdown = {\n  enter: {\n    table: enterTable,\n    tableData: enterCell,\n    tableHeader: enterCell,\n    tableRow: enterRow\n  },\n  exit: {\n    codeText: exitCodeText,\n    table: exitTable,\n    tableData: exit,\n    tableHeader: exit,\n    tableRow: exit\n  }\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterTable(token) {\n  /** @type {AlignType[]} */\n  // @ts-expect-error: `align` is custom.\n  const align = token._align\n  this.enter({type: 'table', align, children: []}, token)\n  this.setData('inTable', true)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitTable(token) {\n  this.exit(token)\n  this.setData('inTable')\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/** @type {FromMarkdownHandle} */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.getData('inTable')) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = /** @type {InlineCode} */ (this.stack[this.stack.length - 1])\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * @param {Options} [options]\n * @returns {ToMarkdownExtension}\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      table: handleTable,\n      tableRow: handleTableRow,\n      tableCell: handleTableCell,\n      inlineCode: inlineCodeWithTable\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, context) {\n    // @ts-expect-error: fixed in `markdown-table@3.0.1`.\n    return serializeData(handleTableAsData(node, context), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, context) {\n    const row = handleTableRowAsData(node, context)\n    // `markdown-table` will always add an align row\n    const value = serializeData([row])\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, context) {\n    const exit = context.enter('tableCell')\n    const subexit = context.enter('phrasing')\n    const value = containerPhrasing(node, context, {\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array.<Array.<string>>} matrix\n   * @param {Array.<string>} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      alignDelimiters,\n      padding,\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {ToMarkdownContext} context\n   */\n  function handleTableAsData(node, context) {\n    const children = node.children\n    let index = -1\n    /** @type {Array.<Array.<string>>} */\n    const result = []\n    const subexit = context.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], context)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {ToMarkdownContext} context\n   */\n  function handleTableRowAsData(node, context) {\n    const children = node.children\n    let index = -1\n    /** @type {Array.<string>} */\n    const result = []\n    const subexit = context.enter('tableRow')\n\n    while (++index < children.length) {\n      result[index] = handleTableCell(children[index], node, context)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, context) {\n    let value = inlineCode(node, parent, context)\n\n    if (context.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n"],"names":["gfmTableFromMarkdown","enter","table","token","align","_align","this","type","children","setData","tableData","enterCell","tableHeader","tableRow","exit","codeText","value","resume","getData","replace","stack","length","$0","$1","options","settings","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","unsafe","character","inConstruct","atBreak","after","handlers","node","_","context","serializeData","index","result","subexit","handleTableRowAsData","handleTableAsData","slice","indexOf","tableCell","handleTableCell","inlineCode","parent","includes","containerPhrasing","before","matrix","markdownTable"],"mappings":"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"}