{"version":3,"file":"colorManipulator.js","sources":["../../../../node_modules/@material-ui/core/es/styles/colorManipulator.js"],"sourcesContent":["import { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@material-ui/utils\";\n\n/* eslint-disable no-use-before-define */\n\n/**\n * Returns a number whose value is limited to the given range.\n *\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clamp(value, min = 0, max = 1) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(`Material-UI: The value provided ${value} is out of range [${min}, ${max}].`);\n    }\n  }\n\n  return Math.min(Math.max(min, value), max);\n}\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n *\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\n\n\nexport function hexToRgb(color) {\n  color = color.substr(1);\n  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');\n  let colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(n => n + n);\n  }\n\n  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', ')})` : '';\n}\n\nfunction intToHex(int) {\n  const hex = int.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n *\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\n\n\nexport function rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  const {\n    values\n  } = decomposeColor(color);\n  return `#${values.map(n => intToHex(n)).join('')}`;\n}\n/**\n * Converts a color from hsl format to rgb format.\n *\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\n\nexport function hslToRgb(color) {\n  color = decomposeColor(color);\n  const {\n    values\n  } = color;\n  const h = values[0];\n  const s = values[1] / 100;\n  const l = values[2] / 100;\n  const a = s * Math.min(l, 1 - l);\n\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n\n  let type = 'rgb';\n  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({\n    type,\n    values: rgb\n  });\n}\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\n\nexport function decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  const marker = color.indexOf('(');\n  const type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? `Material-UI: Unsupported \\`${color}\\` color.\nWe support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().` : _formatMuiErrorMessage(3, color));\n  }\n\n  let values = color.substring(marker + 1, color.length - 1).split(',');\n  values = values.map(value => parseFloat(value));\n  return {\n    type,\n    values\n  };\n}\n/**\n * Converts a color object with type and values to a string.\n *\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\n\nexport function recomposeColor(color) {\n  const {\n    type\n  } = color;\n  let {\n    values\n  } = color;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = `${values[1]}%`;\n    values[2] = `${values[2]}%`;\n  }\n\n  return `${type}(${values.join(', ')})`;\n}\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\n\nexport function getContrastRatio(foreground, background) {\n  const lumA = getLuminance(foreground);\n  const lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\n\nexport function getLuminance(color) {\n  color = decomposeColor(color);\n  let rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(val => {\n    val /= 255; // normalized\n\n    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;\n  }); // Truncate at 3 digits\n\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function emphasize(color, coefficient = 0.15) {\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\nlet warnedOnce = false;\n/**\n * Set the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} value - value to set the alpha channel to in the range 0 -1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n *\n * @deprecated\n * Use `import { alpha } from '@material-ui/core/styles'` instead.\n */\n\nexport function fade(color, value) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!warnedOnce) {\n      warnedOnce = true;\n      console.error(['Material-UI: The `fade` color utility was renamed to `alpha` to better describe its functionality.', '', \"You should use `import { alpha } from '@material-ui/core/styles'`\"].join('\\n'));\n    }\n  }\n\n  return alpha(color, value);\n}\n/**\n * Set the absolute transparency of a color.\n * Any existing alpha value is overwritten.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} value - value to set the alpha channel to in the range 0-1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function alpha(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n\n  color.values[3] = value;\n  return recomposeColor(color);\n}\n/**\n * Darkens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n/**\n * Lightens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}"],"names":["clamp","value","min","max","process","env","NODE_ENV","console","error","Math","hexToRgb","color","substr","re","RegExp","length","colors","match","map","n","index","parseInt","round","join","hslToRgb","decomposeColor","values","h","s","l","a","f","k","type","rgb","push","recomposeColor","charAt","marker","indexOf","substring","Error","_formatMuiErrorMessage","split","parseFloat","i","getLuminance","val","Number","toFixed","warnedOnce","alpha","darken","coefficient","lighten","foreground","background","lumA","lumB","int","hex","toString","intToHex"],"mappings":"0DAYA,SAASA,EAAMC,EAAOC,EAAM,EAAGC,EAAM,GAOnC,MAN6B,eAAzBC,QAAQC,IAAIC,WACVL,EAAQC,GAAOD,EAAQE,IACzBI,QAAQC,MAAM,mCAAmCP,sBAA0BC,MAAQC,OAIhFM,KAAKP,IAAIO,KAAKN,IAAID,EAAKD,GAAQE,GAUjC,SAASO,EAASC,GACvBA,EAAQA,EAAMC,OAAO,GACrB,MAAMC,EAAK,IAAIC,OAAO,OAAOH,EAAMI,QAAU,EAAI,EAAI,KAAM,KAC3D,IAAIC,EAASL,EAAMM,MAAMJ,GAMzB,OAJIG,GAA+B,IAArBA,EAAO,GAAGD,SACtBC,EAASA,EAAOE,KAAIC,GAAKA,EAAIA,KAGxBH,EAAS,MAAwB,IAAlBA,EAAOD,OAAe,IAAM,MAAMC,EAAOE,KAAI,CAACC,EAAGC,IAC9DA,EAAQ,EAAIC,SAASF,EAAG,IAAMV,KAAKa,MAAMD,SAASF,EAAG,IAAM,IAAM,KAAQ,MAC/EI,KAAK,SAAW,GAiCd,SAASC,EAASb,GACvBA,EAAQc,EAAed,GACvB,MAAMe,OACJA,GACEf,EACEgB,EAAID,EAAO,GACXE,EAAIF,EAAO,GAAK,IAChBG,EAAIH,EAAO,GAAK,IAChBI,EAAIF,EAAInB,KAAKP,IAAI2B,EAAG,EAAIA,GAExBE,EAAI,CAACZ,EAAGa,GAAKb,EAAIQ,EAAI,IAAM,KAAOE,EAAIC,EAAIrB,KAAKN,IAAIM,KAAKP,IAAI8B,EAAI,EAAG,EAAIA,EAAG,IAAK,GAErF,IAAIC,EAAO,MACX,MAAMC,EAAM,CAACzB,KAAKa,MAAa,IAAPS,EAAE,IAAWtB,KAAKa,MAAa,IAAPS,EAAE,IAAWtB,KAAKa,MAAa,IAAPS,EAAE,KAO1E,MALmB,SAAfpB,EAAMsB,OACRA,GAAQ,IACRC,EAAIC,KAAKT,EAAO,KAGXU,EAAe,CACpBH,KAAAA,EACAP,OAAQQ,IAYL,SAAST,EAAed,GAE7B,GAAIA,EAAMsB,KACR,OAAOtB,EAGT,GAAwB,MAApBA,EAAM0B,OAAO,GACf,OAAOZ,EAAef,EAASC,IAGjC,MAAM2B,EAAS3B,EAAM4B,QAAQ,KACvBN,EAAOtB,EAAM6B,UAAU,EAAGF,GAEhC,IAAsD,IAAlD,CAAC,MAAO,OAAQ,MAAO,QAAQC,QAAQN,GACzC,MAAM,IAAIQ,MAA+B,eAAzBrC,QAAQC,IAAIC,SAA4B,8BAA8BK,6FACR+B,wBAAuB,EAAG/B,IAG1G,IAAIe,EAASf,EAAM6B,UAAUF,EAAS,EAAG3B,EAAMI,OAAS,GAAG4B,MAAM,KAEjE,OADAjB,EAASA,EAAOR,KAAIjB,GAAS2C,WAAW3C,KACjC,CACLgC,KAAAA,EACAP,OAAAA,GAYG,SAASU,EAAezB,GAC7B,MAAMsB,KACJA,GACEtB,EACJ,IAAIe,OACFA,GACEf,EAUJ,OAR6B,IAAzBsB,EAAKM,QAAQ,OAEfb,EAASA,EAAOR,KAAI,CAACC,EAAG0B,IAAMA,EAAI,EAAIxB,SAASF,EAAG,IAAMA,KACtB,IAAzBc,EAAKM,QAAQ,SACtBb,EAAO,GAAK,GAAGA,EAAO,MACtBA,EAAO,GAAK,GAAGA,EAAO,OAGjB,GAAGO,KAAQP,EAAOH,KAAK,SA2BzB,SAASuB,EAAanC,GAE3B,IAAIuB,EAAqB,SADzBvB,EAAQc,EAAed,IACPsB,KAAiBR,EAAeD,EAASb,IAAQe,OAASf,EAAMe,OAOhF,OANAQ,EAAMA,EAAIhB,KAAI6B,IACZA,GAAO,MAEO,OAAUA,EAAM,QAAUA,EAAM,MAAS,QAAU,MAG5DC,QAAQ,MAASd,EAAI,GAAK,MAASA,EAAI,GAAK,MAASA,EAAI,IAAIe,QAAQ,IAc9E,IAAIC,GAAa,EAgCV,SAASC,EAAMxC,EAAOV,GAS3B,OARAU,EAAQc,EAAed,GACvBV,EAAQD,EAAMC,GAEK,QAAfU,EAAMsB,MAAiC,QAAftB,EAAMsB,OAChCtB,EAAMsB,MAAQ,KAGhBtB,EAAMe,OAAO,GAAKzB,EACXmC,EAAezB,GAUjB,SAASyC,EAAOzC,EAAO0C,GAI5B,GAHA1C,EAAQc,EAAed,GACvB0C,EAAcrD,EAAMqD,IAEe,IAA/B1C,EAAMsB,KAAKM,QAAQ,OACrB5B,EAAMe,OAAO,IAAM,EAAI2B,OAClB,IAAmC,IAA/B1C,EAAMsB,KAAKM,QAAQ,OAC5B,IAAK,IAAIM,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAC1BlC,EAAMe,OAAOmB,IAAM,EAAIQ,EAI3B,OAAOjB,EAAezB,GAUjB,SAAS2C,EAAQ3C,EAAO0C,GAI7B,GAHA1C,EAAQc,EAAed,GACvB0C,EAAcrD,EAAMqD,IAEe,IAA/B1C,EAAMsB,KAAKM,QAAQ,OACrB5B,EAAMe,OAAO,KAAO,IAAMf,EAAMe,OAAO,IAAM2B,OACxC,IAAmC,IAA/B1C,EAAMsB,KAAKM,QAAQ,OAC5B,IAAK,IAAIM,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAC1BlC,EAAMe,OAAOmB,KAAO,IAAMlC,EAAMe,OAAOmB,IAAMQ,EAIjD,OAAOjB,EAAezB,uDAxFjB,SAAmBA,EAAO0C,EAAc,KAC7C,OAAOP,EAAanC,GAAS,GAAMyC,EAAOzC,EAAO0C,GAAeC,EAAQ3C,EAAO0C,WAe1E,SAAc1C,EAAOV,GAQ1B,MAP6B,eAAzBG,QAAQC,IAAIC,WACT4C,IACHA,GAAa,EACb3C,QAAQC,MAAM,CAAC,qGAAsG,GAAI,qEAAqEe,KAAK,SAIhM4B,EAAMxC,EAAOV,uBA3Df,SAA0BsD,EAAYC,GAC3C,MAAMC,EAAOX,EAAaS,GACpBG,EAAOZ,EAAaU,GAC1B,OAAQ/C,KAAKN,IAAIsD,EAAMC,GAAQ,MAASjD,KAAKP,IAAIuD,EAAMC,GAAQ,2FArH1D,SAAkB/C,GAEvB,GAA2B,IAAvBA,EAAM4B,QAAQ,KAChB,OAAO5B,EAGT,MAAMe,OACJA,GACED,EAAed,GACnB,MAAO,IAAIe,EAAOR,KAAIC,GArBxB,SAAkBwC,GAChB,MAAMC,EAAMD,EAAIE,SAAS,IACzB,OAAsB,IAAfD,EAAI7C,OAAe,IAAI6C,IAAQA,EAmBXE,CAAS3C,KAAII,KAAK"}