{"version":3,"file":"cssUtils.js","sources":["../../../../node_modules/@material-ui/core/es/styles/cssUtils.js"],"sourcesContent":["export function isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n} // Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\n\nexport function getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\n} // Emulate the sass function \"unitless\"\n\nexport function toUnitless(length) {\n  return parseFloat(length);\n} // Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\n\nexport function convertLength(baseFontSize) {\n  return (length, toUnit) => {\n    const fromUnit = getUnit(length); // Optimize for cases where `from` and `to` units are accidentally the same.\n\n    if (fromUnit === toUnit) {\n      return length;\n    } // Convert input length to pixels.\n\n\n    let pxLength = toUnitless(length);\n\n    if (fromUnit !== 'px') {\n      if (fromUnit === 'em') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === 'rem') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n        return length;\n      }\n    } // Convert length in pixels to the output unit\n\n\n    let outputLength = pxLength;\n\n    if (toUnit !== 'px') {\n      if (toUnit === 'em') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === 'rem') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\nexport function alignProperty({\n  size,\n  grid\n}) {\n  const sizeBelow = size - size % grid;\n  const sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n} // fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\n\nexport function fontGrid({\n  lineHeight,\n  pixels,\n  htmlFontSize\n}) {\n  return pixels / (lineHeight * htmlFontSize);\n}\n/**\n * generate a responsive version of a given CSS property\n * @example\n * responsiveProperty({\n *   cssProperty: 'fontSize',\n *   min: 15,\n *   max: 20,\n *   unit: 'px',\n *   breakpoints: [300, 600],\n * })\n *\n * // this returns\n *\n * {\n *   fontSize: '15px',\n *   '@media (min-width:300px)': {\n *     fontSize: '17.5px',\n *   },\n *   '@media (min-width:600px)': {\n *     fontSize: '20px',\n *   },\n * }\n *\n * @param {Object} params\n * @param {string} params.cssProperty - The CSS property to be made responsive\n * @param {number} params.min - The smallest value of the CSS property\n * @param {number} params.max - The largest value of the CSS property\n * @param {string} [params.unit] - The unit to be used for the CSS property\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\n * @returns {Object} responsive styles for {params.cssProperty}\n */\n\nexport function responsiveProperty({\n  cssProperty,\n  min,\n  max,\n  unit = 'rem',\n  breakpoints = [600, 960, 1280],\n  transform = null\n}) {\n  const output = {\n    [cssProperty]: `${min}${unit}`\n  };\n  const factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(breakpoint => {\n    let value = min + factor * breakpoint;\n\n    if (transform !== null) {\n      value = transform(value);\n    }\n\n    output[`@media (min-width:${breakpoint}px)`] = {\n      [cssProperty]: `${Math.round(value * 10000) / 10000}${unit}`\n    };\n  });\n  return output;\n}"],"names":["getUnit","input","String","match","toUnitless","length","parseFloat","size","grid","sizeBelow","sizeAbove","baseFontSize","toUnit","fromUnit","pxLength","outputLength","toFixed","lineHeight","pixels","htmlFontSize","value","cssProperty","min","max","unit","breakpoints","transform","output","factor","forEach","breakpoint","Math","round"],"mappings":"gCAMO,SAASA,EAAQC,GACtB,OAAOC,OAAOD,GAAOE,MAAM,oBAAoB,IAAM,GAGhD,SAASC,EAAWC,GACzB,OAAOC,WAAWD,mBAwCb,UAAuBE,KAC5BA,EAAIC,KACJA,IAEA,MAAMC,EAAYF,EAAOA,EAAOC,EAC1BE,EAAYD,EAAYD,EAC9B,OAAOD,EAAOE,EAAYC,EAAYH,EAAOE,EAAYC,mBA1CpD,SAAuBC,GAC5B,MAAO,CAACN,EAAQO,KACd,MAAMC,EAAWb,EAAQK,GAEzB,GAAIQ,IAAaD,EACf,OAAOP,EAIT,IAAIS,EAAWV,EAAWC,GAE1B,GAAiB,OAAbQ,EACF,GAAiB,OAAbA,EACFC,EAAWV,EAAWC,GAAUD,EAAWO,QACtC,GAAiB,QAAbE,EAET,OADAC,EAAWV,EAAWC,GAAUD,EAAWO,GACpCN,EAKX,IAAIU,EAAeD,EAEnB,GAAe,OAAXF,EACF,GAAe,OAAXA,EACFG,EAAeD,EAAWV,EAAWO,OAChC,CAAA,GAAe,QAAXC,EAGT,OAAOP,EAFPU,EAAeD,EAAWV,EAAWO,GAMzC,OAAOL,WAAWS,EAAaC,QAAQ,IAAMJ,eAc1C,UAAkBK,WACvBA,EAAUC,OACVA,EAAMC,aACNA,IAEA,OAAOD,GAAUD,EAAaE,6BAnEzB,SAAoBC,GACzB,OAAOlB,OAAOI,WAAWc,IAAQf,SAAWH,OAAOkB,GAAOf,6BAqGrD,UAA4BgB,YACjCA,EAAWC,IACXA,EAAGC,IACHA,EAAGC,KACHA,EAAO,MAAKC,YACZA,EAAc,CAAC,IAAK,IAAK,MAAKC,UAC9BA,EAAY,OAEZ,MAAMC,EAAS,CACbN,CAACA,GAAc,GAAGC,IAAME,KAEpBI,GAAUL,EAAMD,GAAOG,EAAYA,EAAYpB,OAAS,GAY9D,OAXAoB,EAAYI,SAAQC,IAClB,IAAIV,EAAQE,EAAMM,EAASE,EAET,OAAdJ,IACFN,EAAQM,EAAUN,IAGpBO,EAAO,qBAAqBG,QAAmB,CAC7CT,CAACA,GAAc,GAAGU,KAAKC,MAAc,IAARZ,GAAiB,MAAQI,QAGnDG"}