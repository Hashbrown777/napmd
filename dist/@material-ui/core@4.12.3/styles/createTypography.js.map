{"version":3,"file":"createTypography.js","sources":["../../../../node_modules/@material-ui/core/es/styles/createTypography.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { deepmerge } from '@material-ui/utils';\n\nfunction round(value) {\n  return Math.round(value * 1e5) / 1e5;\n}\n\nlet warnedOnce = false;\n\nfunction roundWithDeprecationWarning(value) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!warnedOnce) {\n      console.warn(['Material-UI: The `theme.typography.round` helper is deprecated.', 'Head to https://material-ui.com/r/migration-v4/#theme for a migration path.'].join('\\n'));\n      warnedOnce = true;\n    }\n  }\n\n  return round(value);\n}\n\nconst caseAllCaps = {\n  textTransform: 'uppercase'\n};\nconst defaultFontFamily = '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif';\n/**\n * @see @link{https://material.io/design/typography/the-type-system.html}\n * @see @link{https://material.io/design/typography/understanding-typography.html}\n */\n\nexport default function createTypography(palette, typography) {\n  const _ref = typeof typography === 'function' ? typography(palette) : typography,\n        {\n    fontFamily = defaultFontFamily,\n    // The default font size of the Material Specification.\n    fontSize = 14,\n    // px\n    fontWeightLight = 300,\n    fontWeightRegular = 400,\n    fontWeightMedium = 500,\n    fontWeightBold = 700,\n    // Tell Material-UI what's the font-size on the html element.\n    // 16px is the default font-size used by browsers.\n    htmlFontSize = 16,\n    // Apply the CSS properties to all the variants.\n    allVariants,\n    pxToRem: pxToRem2\n  } = _ref,\n        other = _objectWithoutPropertiesLoose(_ref, [\"fontFamily\", \"fontSize\", \"fontWeightLight\", \"fontWeightRegular\", \"fontWeightMedium\", \"fontWeightBold\", \"htmlFontSize\", \"allVariants\", \"pxToRem\"]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof fontSize !== 'number') {\n      console.error('Material-UI: `fontSize` is required to be a number.');\n    }\n\n    if (typeof htmlFontSize !== 'number') {\n      console.error('Material-UI: `htmlFontSize` is required to be a number.');\n    }\n  }\n\n  const coef = fontSize / 14;\n\n  const pxToRem = pxToRem2 || (size => `${size / htmlFontSize * coef}rem`);\n\n  const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => _extends({\n    fontFamily,\n    fontWeight,\n    fontSize: pxToRem(size),\n    // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/\n    lineHeight\n  }, fontFamily === defaultFontFamily ? {\n    letterSpacing: `${round(letterSpacing / size)}em`\n  } : {}, casing, allVariants);\n\n  const variants = {\n    h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),\n    h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),\n    h3: buildVariant(fontWeightRegular, 48, 1.167, 0),\n    h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),\n    h5: buildVariant(fontWeightRegular, 24, 1.334, 0),\n    h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),\n    subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),\n    subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),\n    body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),\n    body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),\n    button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),\n    caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),\n    overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps)\n  };\n  return deepmerge(_extends({\n    htmlFontSize,\n    pxToRem,\n    round: roundWithDeprecationWarning,\n    // TODO v5: remove\n    fontFamily,\n    fontSize,\n    fontWeightLight,\n    fontWeightRegular,\n    fontWeightMedium,\n    fontWeightBold\n  }, variants), other, {\n    clone: false // No need to clone deep\n\n  });\n}"],"names":["round","value","Math","warnedOnce","roundWithDeprecationWarning","process","env","NODE_ENV","console","warn","join","caseAllCaps","textTransform","defaultFontFamily","palette","typography","_ref","fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem","pxToRem2","other","_objectWithoutPropertiesLoose","error","coef","size","buildVariant","fontWeight","lineHeight","letterSpacing","casing","_extends","variants","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","button","caption","overline","deepmerge","clone"],"mappings":"yHAIA,SAASA,EAAMC,GACb,OAAOC,KAAKF,MAAc,IAARC,GAAe,IAGnC,IAAIE,GAAa,EAEjB,SAASC,EAA4BH,GAQnC,MAP6B,eAAzBI,QAAQC,IAAIC,WACTJ,IACHK,QAAQC,KAAK,CAAC,kEAAmE,+EAA+EC,KAAK,OACrKP,GAAa,IAIVH,EAAMC,GAGf,MAAMU,EAAc,CAClBC,cAAe,aAEXC,EAAoB,oDAMX,SAA0BC,EAASC,GAChD,MAAMC,EAA6B,mBAAfD,EAA4BA,EAAWD,GAAWC,GAChEE,WACJA,EAAaJ,EAAiBK,SAE9BA,EAAW,GAAEC,gBAEbA,EAAkB,IAAGC,kBACrBA,EAAoB,IAAGC,iBACvBA,EAAmB,IAAGC,eACtBA,EAAiB,IAAGC,aAGpBA,EAAe,GAAEC,YAEjBA,EACAC,QAASC,GACPV,EACEW,EAAQC,gCAA8BZ,EAAM,CAAC,aAAc,WAAY,kBAAmB,oBAAqB,mBAAoB,iBAAkB,eAAgB,cAAe,YAE7J,eAAzBX,QAAQC,IAAIC,WACU,iBAAbW,GACTV,QAAQqB,MAAM,uDAGY,iBAAjBN,GACTf,QAAQqB,MAAM,4DAIlB,MAAMC,EAAOZ,EAAW,GAElBO,EAAUC,IAAaK,GAAWA,EAAOR,EAAeO,EAAzB,OAE/BE,EAAe,CAACC,EAAYF,EAAMG,EAAYC,EAAeC,IAAWC,WAAS,CACrFpB,WAAAA,EACAgB,WAAAA,EACAf,SAAUO,EAAQM,GAElBG,WAAAA,GACCjB,IAAeJ,EAAoB,CACpCsB,cAAe,GAAGnC,EAAMmC,EAAgBJ,QACtC,GAAIK,EAAQZ,GAEVc,EAAW,CACfC,GAAIP,EAAab,EAAiB,GAAI,OAAQ,KAC9CqB,GAAIR,EAAab,EAAiB,GAAI,KAAM,IAC5CsB,GAAIT,EAAaZ,EAAmB,GAAI,MAAO,GAC/CsB,GAAIV,EAAaZ,EAAmB,GAAI,MAAO,KAC/CuB,GAAIX,EAAaZ,EAAmB,GAAI,MAAO,GAC/CwB,GAAIZ,EAAaX,EAAkB,GAAI,IAAK,KAC5CwB,UAAWb,EAAaZ,EAAmB,GAAI,KAAM,KACrD0B,UAAWd,EAAaX,EAAkB,GAAI,KAAM,IACpD0B,MAAOf,EAAaZ,EAAmB,GAAI,IAAK,KAChD4B,MAAOhB,EAAaZ,EAAmB,GAAI,KAAM,KACjD6B,OAAQjB,EAAaX,EAAkB,GAAI,KAAM,GAAKV,GACtDuC,QAASlB,EAAaZ,EAAmB,GAAI,KAAM,IACnD+B,SAAUnB,EAAaZ,EAAmB,GAAI,KAAM,EAAGT,IAEzD,OAAOyC,YAAUf,WAAS,CACxBd,aAAAA,EACAE,QAAAA,EACAzB,MAAOI,EAEPa,WAAAA,EACAC,SAAAA,EACAC,gBAAAA,EACAC,kBAAAA,EACAC,iBAAAA,EACAC,eAAAA,GACCgB,GAAWX,EAAO,CACnB0B,OAAO"}