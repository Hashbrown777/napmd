define(["exports","../../extends","../../objectWithoutPropertiesLoose","@material-ui/utils","../colors/common","../colors/grey","../colors/indigo","../colors/pink","../colors/red","../colors/orange","../colors/blue","../colors/green","./colorManipulator"],(function(r,e,t,o,a,i,n,s,c,d,l,g,p){const m={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",hint:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:a.white,default:i[50]},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},h={text:{primary:a.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",hint:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:i[800],default:"#303030"},action:{active:a.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function u(r,e,t,o){const a=o.light||o,i=o.dark||1.5*o;r[e]||(r.hasOwnProperty(t)?r[e]=r[t]:"light"===e?r.light=p.lighten(r.main,a):"dark"===e&&(r.dark=p.darken(r.main,i)))}r.dark=h,r.default=function(r){const{primary:b={light:n[300],main:n[500],dark:n[700]},secondary:f={light:s.A200,main:s.A400,dark:s.A700},error:y={light:c[300],main:c[500],dark:c[700]},warning:v={light:d[300],main:d[500],dark:d[700]},info:O={light:l[300],main:l[500],dark:l[700]},success:k={light:g[300],main:g[500],dark:g[700]},type:w="light",contrastThreshold:T=3,tonalOffset:E=.2}=r,x=t._objectWithoutPropertiesLoose(r,["primary","secondary","error","warning","info","success","type","contrastThreshold","tonalOffset"]);function M(r){const e=p.getContrastRatio(r,h.text.primary)>=T?h.text.primary:m.text.primary;if("production"!==process.env.NODE_ENV){const t=p.getContrastRatio(r,e);t<3&&console.error([`Material-UI: The contrast ratio of ${t}:1 for ${e} on ${r}`,"falls below the WCAG recommended absolute minimum contrast ratio of 3:1.","https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast"].join("\n"))}return e}const N=(r,t=500,a=300,i=700)=>{if(!(r=e._extends({},r)).main&&r[t]&&(r.main=r[t]),!r.main)throw new Error("production"!==process.env.NODE_ENV?`Material-UI: The color provided to augmentColor(color) is invalid.\nThe color object needs to have a \`main\` property or a \`${t}\` property.`:o.formatMuiErrorMessage(4,t));if("string"!=typeof r.main)throw new Error("production"!==process.env.NODE_ENV?`Material-UI: The color provided to augmentColor(color) is invalid.\n\`color.main\` should be a string, but \`${JSON.stringify(r.main)}\` was provided instead.\n\nDid you intend to use one of the following approaches?\n\nimport {Â green } from "@material-ui/core/colors";\n\nconst theme1 = createTheme({ palette: {\n  primary: green,\n} });\n\nconst theme2 = createTheme({ palette: {\n  primary: { main: green[500] },\n} });`:o.formatMuiErrorMessage(5,JSON.stringify(r.main)));return u(r,"light",a,E),u(r,"dark",i,E),r.contrastText||(r.contrastText=M(r.main)),r},C={dark:h,light:m};return"production"!==process.env.NODE_ENV&&(C[w]||console.error(`Material-UI: The palette type \`${w}\` is not supported.`)),o.deepmerge(e._extends({common:a,type:w,primary:N(b),secondary:N(f,"A400","A200","A700"),error:N(y),warning:N(v),info:N(O),success:N(k),grey:i,contrastThreshold:T,getContrastText:M,augmentColor:N,tonalOffset:E},C[w]),x)},r.light=m,Object.defineProperty(r,"__esModule",{value:!0})}));
//# sourceMappingURL=createPalette.js.map
