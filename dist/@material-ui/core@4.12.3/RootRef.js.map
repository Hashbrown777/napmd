{"version":3,"file":"RootRef.js","sources":["../../../node_modules/@material-ui/core/es/RootRef/RootRef.js"],"sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { exactProp, refType } from '@material-ui/utils';\nimport setRef from '../utils/setRef';\nlet warnedOnce = false;\n/**\n * ⚠️⚠️⚠️\n * If you want the DOM element of a Material-UI component check out\n * [FAQ: How can I access the DOM element?](/getting-started/faq/#how-can-i-access-the-dom-element)\n * first.\n *\n * This component uses `findDOMNode` which is deprecated in React.StrictMode.\n *\n * Helper component to allow attaching a ref to a\n * wrapped element to access the underlying DOM element.\n *\n * It's highly inspired by https://github.com/facebook/react/issues/11401#issuecomment-340543801.\n * For example:\n * ```jsx\n * import React from 'react';\n * import RootRef from '@material-ui/core/RootRef';\n *\n * function MyComponent() {\n *   const domRef = React.useRef();\n *\n *   React.useEffect(() => {\n *     console.log(domRef.current); // DOM node\n *   }, []);\n *\n *   return (\n *     <RootRef rootRef={domRef}>\n *       <SomeChildComponent />\n *     </RootRef>\n *   );\n * }\n * ```\n *\n * @deprecated\n */\n\nclass RootRef extends React.Component {\n  componentDidMount() {\n    this.ref = ReactDOM.findDOMNode(this);\n    setRef(this.props.rootRef, this.ref);\n  }\n\n  componentDidUpdate(prevProps) {\n    const ref = ReactDOM.findDOMNode(this);\n\n    if (prevProps.rootRef !== this.props.rootRef || this.ref !== ref) {\n      if (prevProps.rootRef !== this.props.rootRef) {\n        setRef(prevProps.rootRef, null);\n      }\n\n      this.ref = ref;\n      setRef(this.props.rootRef, this.ref);\n    }\n  }\n\n  componentWillUnmount() {\n    this.ref = null;\n    setRef(this.props.rootRef, null);\n  }\n\n  render() {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!warnedOnce) {\n        warnedOnce = true;\n        console.warn(['Material-UI: The RootRef component is deprecated.', 'The component relies on the ReactDOM.findDOMNode API which is deprecated in React.StrictMode.', 'Instead, you can get a reference to the underlying DOM node of the components via the `ref` prop.'].join('/n'));\n      }\n    }\n\n    return this.props.children;\n  }\n\n}\n\nprocess.env.NODE_ENV !== \"production\" ? RootRef.propTypes = {\n  /**\n   * The wrapped element.\n   */\n  children: PropTypes.element.isRequired,\n\n  /**\n   * A ref that points to the first DOM node of the wrapped element.\n   */\n  rootRef: refType.isRequired\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? RootRef.propTypes = exactProp(RootRef.propTypes) : void 0;\n}\n\nexport default RootRef;"],"names":["warnedOnce","RootRef","React","Component","componentDidMount","this","ref","ReactDOM","findDOMNode","setRef","props","rootRef","componentDidUpdate","prevProps","componentWillUnmount","render","process","env","NODE_ENV","console","warn","join","children","propTypes","PropTypes","element","isRequired","refType","exactProp"],"mappings":"weAKA,IAAIA,GAAa,EAoCjB,MAAMC,UAAgBC,EAAMC,UAC1BC,oBACEC,KAAKC,IAAMC,EAASC,YAAYH,MAChCI,EAAOJ,KAAKK,MAAMC,QAASN,KAAKC,KAGlCM,mBAAmBC,GACjB,MAAMP,EAAMC,EAASC,YAAYH,MAE7BQ,EAAUF,UAAYN,KAAKK,MAAMC,SAAWN,KAAKC,MAAQA,IACvDO,EAAUF,UAAYN,KAAKK,MAAMC,SACnCF,EAAOI,EAAUF,QAAS,MAG5BN,KAAKC,IAAMA,EACXG,EAAOJ,KAAKK,MAAMC,QAASN,KAAKC,MAIpCQ,uBACET,KAAKC,IAAM,KACXG,EAAOJ,KAAKK,MAAMC,QAAS,MAG7BI,SAQE,MAP6B,eAAzBC,QAAQC,IAAIC,WACTlB,IACHA,GAAa,EACbmB,QAAQC,KAAK,CAAC,oDAAqD,gGAAiG,qGAAqGC,KAAK,SAI3QhB,KAAKK,MAAMY,gBAKG,eAAzBN,QAAQC,IAAIC,WAA4BjB,EAAQsB,UAAY,CAI1DD,SAAUE,UAAUC,QAAQC,WAK5Bf,QAASgB,UAAQD,aAGU,eAAzBV,QAAQC,IAAIC,UACW,eAAzBF,QAAQC,IAAIC,WAA4BjB,EAAQsB,UAAYK,YAAU3B,EAAQsB"}