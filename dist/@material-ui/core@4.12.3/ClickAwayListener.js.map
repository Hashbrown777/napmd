{"version":3,"file":"ClickAwayListener.js","sources":["../../../node_modules/@material-ui/core/es/ClickAwayListener/ClickAwayListener.js"],"sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport ownerDocument from '../utils/ownerDocument';\nimport useForkRef from '../utils/useForkRef';\nimport useEventCallback from '../utils/useEventCallback';\nimport { elementAcceptingRef, exactProp } from '@material-ui/utils';\n\nfunction mapEventPropToEvent(eventProp) {\n  return eventProp.substring(2).toLowerCase();\n}\n\nfunction clickedRootScrollbar(event) {\n  return document.documentElement.clientWidth < event.clientX || document.documentElement.clientHeight < event.clientY;\n}\n/**\n * Listen for click events that occur somewhere in the document, outside of the element itself.\n * For instance, if you need to hide a menu when people click anywhere else on your page.\n */\n\n\nfunction ClickAwayListener(props) {\n  const {\n    children,\n    disableReactTree = false,\n    mouseEvent = 'onClick',\n    onClickAway,\n    touchEvent = 'onTouchEnd'\n  } = props;\n  const movedRef = React.useRef(false);\n  const nodeRef = React.useRef(null);\n  const activatedRef = React.useRef(false);\n  const syntheticEventRef = React.useRef(false);\n  React.useEffect(() => {\n    // Ensure that this component is not \"activated\" synchronously.\n    // https://github.com/facebook/react/issues/20074\n    setTimeout(() => {\n      activatedRef.current = true;\n    }, 0);\n    return () => {\n      activatedRef.current = false;\n    };\n  }, []); // can be removed once we drop support for non ref forwarding class components\n\n  const handleOwnRef = React.useCallback(instance => {\n    // #StrictMode ready\n    nodeRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  const handleRef = useForkRef(children.ref, handleOwnRef); // The handler doesn't take event.defaultPrevented into account:\n  //\n  // event.preventDefault() is meant to stop default behaviours like\n  // clicking a checkbox to check it, hitting a button to submit a form,\n  // and hitting left arrow to move the cursor in a text input etc.\n  // Only special HTML elements have these default behaviors.\n\n  const handleClickAway = useEventCallback(event => {\n    // Given developers can stop the propagation of the synthetic event,\n    // we can only be confident with a positive value.\n    const insideReactTree = syntheticEventRef.current;\n    syntheticEventRef.current = false; // 1. IE 11 support, which trigger the handleClickAway even after the unbind\n    // 2. The child might render null.\n    // 3. Behave like a blur listener.\n\n    if (!activatedRef.current || !nodeRef.current || clickedRootScrollbar(event)) {\n      return;\n    } // Do not act if user performed touchmove\n\n\n    if (movedRef.current) {\n      movedRef.current = false;\n      return;\n    }\n\n    let insideDOM; // If not enough, can use https://github.com/DieterHolvoet/event-propagation-path/blob/master/propagationPath.js\n\n    if (event.composedPath) {\n      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;\n    } else {\n      // TODO v6 remove dead logic https://caniuse.com/#search=composedPath.\n      const doc = ownerDocument(nodeRef.current);\n      insideDOM = !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);\n    }\n\n    if (!insideDOM && (disableReactTree || !insideReactTree)) {\n      onClickAway(event);\n    }\n  }); // Keep track of mouse/touch events that bubbled up through the portal.\n\n  const createHandleSynthetic = handlerName => event => {\n    syntheticEventRef.current = true;\n    const childrenPropsHandler = children.props[handlerName];\n\n    if (childrenPropsHandler) {\n      childrenPropsHandler(event);\n    }\n  };\n\n  const childrenProps = {\n    ref: handleRef\n  };\n\n  if (touchEvent !== false) {\n    childrenProps[touchEvent] = createHandleSynthetic(touchEvent);\n  }\n\n  React.useEffect(() => {\n    if (touchEvent !== false) {\n      const mappedTouchEvent = mapEventPropToEvent(touchEvent);\n      const doc = ownerDocument(nodeRef.current);\n\n      const handleTouchMove = () => {\n        movedRef.current = true;\n      };\n\n      doc.addEventListener(mappedTouchEvent, handleClickAway);\n      doc.addEventListener('touchmove', handleTouchMove);\n      return () => {\n        doc.removeEventListener(mappedTouchEvent, handleClickAway);\n        doc.removeEventListener('touchmove', handleTouchMove);\n      };\n    }\n\n    return undefined;\n  }, [handleClickAway, touchEvent]);\n\n  if (mouseEvent !== false) {\n    childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);\n  }\n\n  React.useEffect(() => {\n    if (mouseEvent !== false) {\n      const mappedMouseEvent = mapEventPropToEvent(mouseEvent);\n      const doc = ownerDocument(nodeRef.current);\n      doc.addEventListener(mappedMouseEvent, handleClickAway);\n      return () => {\n        doc.removeEventListener(mappedMouseEvent, handleClickAway);\n      };\n    }\n\n    return undefined;\n  }, [handleClickAway, mouseEvent]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.cloneElement(children, childrenProps));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ClickAwayListener.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The wrapped element.\n   */\n  children: elementAcceptingRef.isRequired,\n\n  /**\n   * If `true`, the React tree is ignored and only the DOM tree is considered.\n   * This prop changes how portaled elements are handled.\n   */\n  disableReactTree: PropTypes.bool,\n\n  /**\n   * The mouse event to listen to. You can disable the listener by providing `false`.\n   */\n  mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', false]),\n\n  /**\n   * Callback fired when a \"click away\" event is detected.\n   */\n  onClickAway: PropTypes.func.isRequired,\n\n  /**\n   * The touch event to listen to. You can disable the listener by providing `false`.\n   */\n  touchEvent: PropTypes.oneOf(['onTouchEnd', 'onTouchStart', false])\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  ClickAwayListener['propTypes' + ''] = exactProp(ClickAwayListener.propTypes);\n}\n\nexport default ClickAwayListener;"],"names":["mapEventPropToEvent","eventProp","substring","toLowerCase","ClickAwayListener","props","children","disableReactTree","mouseEvent","onClickAway","touchEvent","movedRef","React","useRef","nodeRef","activatedRef","syntheticEventRef","useEffect","setTimeout","current","handleOwnRef","useCallback","instance","ReactDOM","findDOMNode","handleRef","useForkRef","ref","handleClickAway","useEventCallback","event","insideReactTree","document","documentElement","clientWidth","clientX","clientHeight","clientY","clickedRootScrollbar","insideDOM","composedPath","indexOf","ownerDocument","contains","target","createHandleSynthetic","handlerName","childrenPropsHandler","childrenProps","mappedTouchEvent","doc","handleTouchMove","addEventListener","removeEventListener","mappedMouseEvent","createElement","Fragment","cloneElement","process","env","NODE_ENV","propTypes","elementAcceptingRef","isRequired","PropTypes","bool","oneOf","func","exactProp"],"mappings":"sjBAQA,SAASA,EAAoBC,GAC3B,OAAOA,EAAUC,UAAU,GAAGC,cAYhC,SAASC,EAAkBC,GACzB,MAAMC,SACJA,EAAQC,iBACRA,GAAmB,EAAKC,WACxBA,EAAa,UAASC,YACtBA,EAAWC,WACXA,EAAa,cACXL,EACEM,EAAWC,EAAMC,QAAO,GACxBC,EAAUF,EAAMC,OAAO,MACvBE,EAAeH,EAAMC,QAAO,GAC5BG,EAAoBJ,EAAMC,QAAO,GACvCD,EAAMK,WAAU,KAGdC,YAAW,KACTH,EAAaI,SAAU,IACtB,GACI,KACLJ,EAAaI,SAAU,KAExB,IAEH,MAAMC,EAAeR,EAAMS,aAAYC,IAErCR,EAAQK,QAAUI,EAASC,YAAYF,KACtC,IACGG,EAAYC,EAAWpB,EAASqB,IAAKP,GAOrCQ,EAAkBC,GAAiBC,IAGvC,MAAMC,EAAkBf,EAAkBG,QAK1C,GAJAH,EAAkBG,SAAU,GAIvBJ,EAAaI,UAAYL,EAAQK,SAnD1C,SAA8BW,GAC5B,OAAOE,SAASC,gBAAgBC,YAAcJ,EAAMK,SAAWH,SAASC,gBAAgBG,aAAeN,EAAMO,QAkD1DC,CAAqBR,GACpE,OAIF,GAAInB,EAASQ,QAEX,YADAR,EAASQ,SAAU,GAIrB,IAAIoB,EAEJ,GAAIT,EAAMU,aACRD,EAAYT,EAAMU,eAAeC,QAAQ3B,EAAQK,UAAY,MACxD,CAGLoB,GADYG,EAAc5B,EAAQK,SACjBc,gBAAgBU,SAASb,EAAMc,SAAW9B,EAAQK,QAAQwB,SAASb,EAAMc,QAGvFL,IAAchC,GAAqBwB,GACtCtB,EAAYqB,MAIVe,EAAwBC,GAAehB,IAC3Cd,EAAkBG,SAAU,EAC5B,MAAM4B,EAAuBzC,EAASD,MAAMyC,GAExCC,GACFA,EAAqBjB,IAInBkB,EAAgB,CACpBrB,IAAKF,GA2CP,OAxCmB,IAAff,IACFsC,EAActC,GAAcmC,EAAsBnC,IAGpDE,EAAMK,WAAU,KACd,IAAmB,IAAfP,EAAsB,CACxB,MAAMuC,EAAmBjD,EAAoBU,GACvCwC,EAAMR,EAAc5B,EAAQK,SAE5BgC,EAAkB,KACtBxC,EAASQ,SAAU,GAKrB,OAFA+B,EAAIE,iBAAiBH,EAAkBrB,GACvCsB,EAAIE,iBAAiB,YAAaD,GAC3B,KACLD,EAAIG,oBAAoBJ,EAAkBrB,GAC1CsB,EAAIG,oBAAoB,YAAaF,OAKxC,CAACvB,EAAiBlB,KAEF,IAAfF,IACFwC,EAAcxC,GAAcqC,EAAsBrC,IAGpDI,EAAMK,WAAU,KACd,IAAmB,IAAfT,EAAsB,CACxB,MAAM8C,EAAmBtD,EAAoBQ,GACvC0C,EAAMR,EAAc5B,EAAQK,SAElC,OADA+B,EAAIE,iBAAiBE,EAAkB1B,GAChC,KACLsB,EAAIG,oBAAoBC,EAAkB1B,OAK7C,CAACA,EAAiBpB,IACDI,EAAM2C,cAAc3C,EAAM4C,SAAU,KAAmB5C,EAAM6C,aAAanD,EAAU0C,UAGjF,eAAzBU,QAAQC,IAAIC,WAA4BxD,EAAkByD,UAAY,CASpEvD,SAAUwD,sBAAoBC,WAM9BxD,iBAAkByD,UAAUC,KAK5BzD,WAAYwD,UAAUE,MAAM,CAAC,UAAW,cAAe,aAAa,IAKpEzD,YAAauD,UAAUG,KAAKJ,WAK5BrD,WAAYsD,UAAUE,MAAM,CAAC,aAAc,gBAAgB,MAGhC,eAAzBR,QAAQC,IAAIC,WAEdxD,EAAkC,UAAIgE,YAAUhE,EAAkByD"}