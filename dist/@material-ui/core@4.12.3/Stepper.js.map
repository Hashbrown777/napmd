{"version":3,"file":"Stepper.js","sources":["../../../node_modules/@material-ui/core/es/Stepper/Stepper.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Paper from '../Paper';\nimport StepConnector from '../StepConnector';\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    padding: 24\n  },\n\n  /* Styles applied to the root element if `orientation=\"horizontal\"`. */\n  horizontal: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n\n  /* Styles applied to the root element if `orientation=\"vertical\"`. */\n  vertical: {\n    flexDirection: 'column'\n  },\n\n  /* Styles applied to the root element if `alternativeLabel={true}`. */\n  alternativeLabel: {\n    alignItems: 'flex-start'\n  }\n};\nconst defaultConnector = /*#__PURE__*/React.createElement(StepConnector, null);\nconst Stepper = /*#__PURE__*/React.forwardRef(function Stepper(props, ref) {\n  const {\n    activeStep = 0,\n    alternativeLabel = false,\n    children,\n    classes,\n    className,\n    connector: connectorProp = defaultConnector,\n    nonLinear = false,\n    orientation = 'horizontal'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"activeStep\", \"alternativeLabel\", \"children\", \"classes\", \"className\", \"connector\", \"nonLinear\", \"orientation\"]);\n\n  const connector = /*#__PURE__*/React.isValidElement(connectorProp) ? /*#__PURE__*/React.cloneElement(connectorProp, {\n    orientation\n  }) : null;\n  const childrenArray = React.Children.toArray(children);\n  const steps = childrenArray.map((step, index) => {\n    const state = {\n      index,\n      active: false,\n      completed: false,\n      disabled: false\n    };\n\n    if (activeStep === index) {\n      state.active = true;\n    } else if (!nonLinear && activeStep > index) {\n      state.completed = true;\n    } else if (!nonLinear && activeStep < index) {\n      state.disabled = true;\n    }\n\n    return /*#__PURE__*/React.cloneElement(step, _extends({\n      alternativeLabel,\n      connector,\n      last: index + 1 === childrenArray.length,\n      orientation\n    }, state, step.props));\n  });\n  return /*#__PURE__*/React.createElement(Paper, _extends({\n    square: true,\n    elevation: 0,\n    className: clsx(classes.root, classes[orientation], className, alternativeLabel && classes.alternativeLabel),\n    ref: ref\n  }, other), steps);\n});\nprocess.env.NODE_ENV !== \"production\" ? Stepper.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Set the active step (zero based index).\n   * Set to -1 to disable all the steps.\n   */\n  activeStep: PropTypes.number,\n\n  /**\n   * If set to 'true' and orientation is horizontal,\n   * then the step label will be positioned under the icon.\n   */\n  alternativeLabel: PropTypes.bool,\n\n  /**\n   * Two or more `<Step />` components.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * An element to be placed between each step.\n   */\n  connector: PropTypes.element,\n\n  /**\n   * If set the `Stepper` will not assist in controlling steps for linear flow.\n   */\n  nonLinear: PropTypes.bool,\n\n  /**\n   * The stepper orientation (layout flow direction).\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiStepper'\n})(Stepper);"],"names":["styles","root","display","padding","horizontal","flexDirection","alignItems","vertical","alternativeLabel","defaultConnector","React","createElement","StepConnector","Stepper","forwardRef","props","ref","activeStep","children","classes","className","connector","connectorProp","nonLinear","orientation","other","_objectWithoutPropertiesLoose","isValidElement","cloneElement","childrenArray","Children","toArray","steps","map","step","index","state","active","completed","disabled","_extends","last","length","Paper","square","elevation","clsx","process","env","NODE_ENV","propTypes","PropTypes","number","bool","node","object","string","element","oneOf","withStyles","name"],"mappings":"wlCAQaA,EAAS,CAEpBC,KAAM,CACJC,QAAS,OACTC,QAAS,IAIXC,WAAY,CACVC,cAAe,MACfC,WAAY,UAIdC,SAAU,CACRF,cAAe,UAIjBG,iBAAkB,CAChBF,WAAY,eAGVG,EAAgCC,EAAMC,cAAcC,UAAe,MACnEC,EAAuBH,EAAMI,YAAW,SAAiBC,EAAOC,GACpE,MAAMC,WACJA,EAAa,EAACT,iBACdA,GAAmB,EAAKU,SACxBA,EAAQC,QACRA,EAAOC,UACPA,EACAC,UAAWC,EAAgBb,EAAgBc,UAC3CA,GAAY,EAAKC,YACjBA,EAAc,cACZT,EACEU,EAAQC,gCAA8BX,EAAO,CAAC,aAAc,mBAAoB,WAAY,UAAW,YAAa,YAAa,YAAa,gBAE9IM,EAAyBX,EAAMiB,eAAeL,GAA8BZ,EAAMkB,aAAaN,EAAe,CAClHE,YAAAA,IACG,KACCK,EAAgBnB,EAAMoB,SAASC,QAAQb,GACvCc,EAAQH,EAAcI,KAAI,CAACC,EAAMC,KACrC,MAAMC,EAAQ,CACZD,MAAAA,EACAE,QAAQ,EACRC,WAAW,EACXC,UAAU,GAWZ,OARItB,IAAekB,EACjBC,EAAMC,QAAS,GACLd,GAAaN,EAAakB,EACpCC,EAAME,WAAY,GACRf,GAAaN,EAAakB,IACpCC,EAAMG,UAAW,GAGC7B,EAAMkB,aAAaM,EAAMM,WAAS,CACpDhC,iBAAAA,EACAa,UAAAA,EACAoB,KAAMN,EAAQ,IAAMN,EAAca,OAClClB,YAAAA,GACCY,EAAOF,EAAKnB,WAEjB,OAAoBL,EAAMC,cAAcgC,UAAOH,WAAS,CACtDI,QAAQ,EACRC,UAAW,EACXzB,UAAW0B,UAAK3B,EAAQlB,KAAMkB,EAAQK,GAAcJ,EAAWZ,GAAoBW,EAAQX,kBAC3FQ,IAAKA,GACJS,GAAQO,MAEY,eAAzBe,QAAQC,IAAIC,WAA4BpC,EAAQqC,UAAY,CAU1DjC,WAAYkC,UAAUC,OAMtB5C,iBAAkB2C,UAAUE,KAK5BnC,SAAUiC,UAAUG,KAMpBnC,QAASgC,UAAUI,OAKnBnC,UAAW+B,UAAUK,OAKrBnC,UAAW8B,UAAUM,QAKrBlC,UAAW4B,UAAUE,KAKrB7B,YAAa2B,UAAUO,MAAM,CAAC,aAAc,qBAE/BC,EAAW3D,EAAQ,CAChC4D,KAAM,cADOD,CAEZ9C"}