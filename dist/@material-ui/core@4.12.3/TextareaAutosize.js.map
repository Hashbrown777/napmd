{"version":3,"file":"TextareaAutosize.js","sources":["../../../node_modules/@material-ui/core/es/TextareaAutosize/TextareaAutosize.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from '../utils/debounce';\nimport useForkRef from '../utils/useForkRef';\nimport deprecatedPropType from '../utils/deprecatedPropType';\n\nfunction getStyleValue(computedStyle, property) {\n  return parseInt(computedStyle[property], 10) || 0;\n}\n\nconst useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\nconst styles = {\n  /* Styles applied to the shadow textarea element. */\n  shadow: {\n    // Visibility needed to hide the extra text area on iPads\n    visibility: 'hidden',\n    // Remove from the content flow\n    position: 'absolute',\n    // Ignore the scrollbar width\n    overflow: 'hidden',\n    height: 0,\n    top: 0,\n    left: 0,\n    // Create a new layer, increase the isolation of the computed values\n    transform: 'translateZ(0)'\n  }\n};\nconst TextareaAutosize = /*#__PURE__*/React.forwardRef(function TextareaAutosize(props, ref) {\n  const {\n    onChange,\n    rows,\n    rowsMax,\n    rowsMin: rowsMinProp,\n    maxRows: maxRowsProp,\n    minRows: minRowsProp = 1,\n    style,\n    value\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"onChange\", \"rows\", \"rowsMax\", \"rowsMin\", \"maxRows\", \"minRows\", \"style\", \"value\"]);\n\n  const maxRows = maxRowsProp || rowsMax;\n  const minRows = rows || rowsMinProp || minRowsProp;\n  const {\n    current: isControlled\n  } = React.useRef(value != null);\n  const inputRef = React.useRef(null);\n  const handleRef = useForkRef(ref, inputRef);\n  const shadowRef = React.useRef(null);\n  const renders = React.useRef(0);\n  const [state, setState] = React.useState({});\n  const syncHeight = React.useCallback(() => {\n    const input = inputRef.current;\n    const computedStyle = window.getComputedStyle(input);\n    const inputShallow = shadowRef.current;\n    inputShallow.style.width = computedStyle.width;\n    inputShallow.value = input.value || props.placeholder || 'x';\n\n    if (inputShallow.value.slice(-1) === '\\n') {\n      // Certain fonts which overflow the line height will cause the textarea\n      // to report a different scrollHeight depending on whether the last line\n      // is empty. Make it non-empty to avoid this issue.\n      inputShallow.value += ' ';\n    }\n\n    const boxSizing = computedStyle['box-sizing'];\n    const padding = getStyleValue(computedStyle, 'padding-bottom') + getStyleValue(computedStyle, 'padding-top');\n    const border = getStyleValue(computedStyle, 'border-bottom-width') + getStyleValue(computedStyle, 'border-top-width'); // The height of the inner content\n\n    const innerHeight = inputShallow.scrollHeight - padding; // Measure height of a textarea with a single row\n\n    inputShallow.value = 'x';\n    const singleRowHeight = inputShallow.scrollHeight - padding; // The height of the outer content\n\n    let outerHeight = innerHeight;\n\n    if (minRows) {\n      outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);\n    }\n\n    if (maxRows) {\n      outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);\n    }\n\n    outerHeight = Math.max(outerHeight, singleRowHeight); // Take the box sizing into account for applying this value as a style.\n\n    const outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);\n    const overflow = Math.abs(outerHeight - innerHeight) <= 1;\n    setState(prevState => {\n      // Need a large enough difference to update the height.\n      // This prevents infinite rendering loop.\n      if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {\n        renders.current += 1;\n        return {\n          overflow,\n          outerHeightStyle\n        };\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (renders.current === 20) {\n          console.error(['Material-UI: Too many re-renders. The layout is unstable.', 'TextareaAutosize limits the number of renders to prevent an infinite loop.'].join('\\n'));\n        }\n      }\n\n      return prevState;\n    });\n  }, [maxRows, minRows, props.placeholder]);\n  React.useEffect(() => {\n    const handleResize = debounce(() => {\n      renders.current = 0;\n      syncHeight();\n    });\n    window.addEventListener('resize', handleResize);\n    return () => {\n      handleResize.clear();\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [syncHeight]);\n  useEnhancedEffect(() => {\n    syncHeight();\n  });\n  React.useEffect(() => {\n    renders.current = 0;\n  }, [value]);\n\n  const handleChange = event => {\n    renders.current = 0;\n\n    if (!isControlled) {\n      syncHeight();\n    }\n\n    if (onChange) {\n      onChange(event);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"textarea\", _extends({\n    value: value,\n    onChange: handleChange,\n    ref: handleRef // Apply the rows prop to get a \"correct\" first SSR paint\n    ,\n    rows: minRows,\n    style: _extends({\n      height: state.outerHeightStyle,\n      // Need a large enough difference to allow scrolling.\n      // This prevents infinite rendering loop.\n      overflow: state.overflow ? 'hidden' : null\n    }, style)\n  }, other)), /*#__PURE__*/React.createElement(\"textarea\", {\n    \"aria-hidden\": true,\n    className: props.className,\n    readOnly: true,\n    ref: shadowRef,\n    tabIndex: -1,\n    style: _extends({}, styles.shadow, style)\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TextareaAutosize.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Maximum number of rows to display.\n   */\n  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Minimum number of rows to display.\n   */\n  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * Minimum number of rows to display.\n   * @deprecated Use `minRows` instead.\n   */\n  rows: deprecatedPropType(PropTypes.oneOfType([PropTypes.number, PropTypes.string]), 'Use `minRows` instead.'),\n\n  /**\n   * Maximum number of rows to display.\n   * @deprecated Use `maxRows` instead.\n   */\n  rowsMax: deprecatedPropType(PropTypes.oneOfType([PropTypes.number, PropTypes.string]), 'Use `maxRows` instead.'),\n\n  /**\n   * Minimum number of rows to display.\n   * @deprecated Use `minRows` instead.\n   */\n  rowsMin: deprecatedPropType(PropTypes.oneOfType([PropTypes.number, PropTypes.string]), 'Use `minRows` instead.'),\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.number, PropTypes.string])\n} : void 0;\nexport default TextareaAutosize;"],"names":["getStyleValue","computedStyle","property","parseInt","useEnhancedEffect","window","React","useLayoutEffect","useEffect","styles","visibility","position","overflow","height","top","left","transform","TextareaAutosize","forwardRef","props","ref","onChange","rows","rowsMax","rowsMin","rowsMinProp","maxRows","maxRowsProp","minRows","minRowsProp","style","value","other","_objectWithoutPropertiesLoose","current","isControlled","useRef","inputRef","handleRef","useForkRef","shadowRef","renders","state","setState","useState","syncHeight","useCallback","input","getComputedStyle","inputShallow","width","placeholder","slice","boxSizing","padding","border","innerHeight","scrollHeight","singleRowHeight","outerHeight","Math","max","Number","min","outerHeightStyle","abs","prevState","process","env","NODE_ENV","console","error","join","handleResize","debounce","addEventListener","clear","removeEventListener","createElement","Fragment","_extends","event","className","readOnly","tabIndex","propTypes","PropTypes","string","oneOfType","number","func","deprecatedPropType","object","arrayOf"],"mappings":"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"}