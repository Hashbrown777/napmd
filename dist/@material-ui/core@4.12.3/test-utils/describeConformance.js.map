{"version":3,"file":"describeConformance.js","sources":["../../../../node_modules/@material-ui/core/es/test-utils/describeConformance.js"],"sourcesContent":["import { expect } from 'chai';\nimport * as React from 'react';\nimport findOutermostIntrinsic from './findOutermostIntrinsic';\nimport ReactTestRenderer from 'react-test-renderer';\nimport testRef from './testRef';\n/**\n * Glossary\n * - root component:\n *   - renders the outermost host component\n *   - has the `root` class if the component has one\n *   - excess props are spread to this component\n *   - has the type of `inheritComponent`\n */\n\n/**\n * Returns the component with the same constructor as `component` that renders\n * the outermost host\n *\n * @param {import('enzyme').ReactWrapper} wrapper\n * @param {object} options\n * @param {import('react').ElementType} component\n */\n\nfunction findRootComponent(wrapper, {\n  component\n}) {\n  const outermostHostElement = findOutermostIntrinsic(wrapper).getElement();\n  return wrapper.find(component).filterWhere(componentWrapper => {\n    return componentWrapper.contains(outermostHostElement);\n  });\n}\n\nfunction randomStringValue() {\n  return Math.random().toString(36).slice(2);\n}\n/**\n * Material-UI components have a `className` prop. The `className` is applied to\n * the root component.\n *\n * @param {React.ReactElement} element\n * @param {() => ConformanceOptions} getOptions\n */\n\n\nfunction testClassName(element, getOptions) {\n  it('applies the className to the root component', () => {\n    const {\n      mount\n    } = getOptions();\n    const className = randomStringValue();\n    const wrapper = mount( /*#__PURE__*/React.cloneElement(element, {\n      className\n    }));\n    expect(findOutermostIntrinsic(wrapper).hasClass(className)).to.equal(true, 'does have a custom `className`');\n  });\n}\n/**\n * Material-UI components have a `component` prop that allows rendering a different\n * Component from @inheritComponent\n *\n * @param {React.ReactElement} element\n * @param {() => ConformanceOptions} getOptions\n */\n\n\nfunction testComponentProp(element, getOptions) {\n  describe('prop: component', () => {\n    it('can render another root component with the `component` prop', () => {\n      const {\n        classes,\n        mount,\n        testComponentPropWith: component = 'em'\n      } = getOptions();\n      const wrapper = mount( /*#__PURE__*/React.cloneElement(element, {\n        component\n      }));\n      expect(findRootComponent(wrapper, {\n        classes,\n        component\n      }).exists()).to.equal(true);\n    });\n  });\n}\n/**\n * Material-UI components can spread additional props to a documented component.\n * It's set via @inheritComponent in the source.\n *\n * @param {React.ReactElement} element\n * @param {() => ConformanceOptions} getOptions\n */\n\n\nfunction testPropsSpread(element, getOptions) {\n  it(`spreads props to the root component`, () => {\n    // type def in ConformanceOptions\n    const {\n      classes,\n      inheritComponent,\n      mount\n    } = getOptions();\n    const testProp = 'data-test-props-spread';\n    const value = randomStringValue();\n    const wrapper = mount( /*#__PURE__*/React.cloneElement(element, {\n      [testProp]: value\n    }));\n    const root = findRootComponent(wrapper, {\n      classes,\n      component: inheritComponent\n    });\n    expect(root.props()[testProp]).to.equal(value);\n  });\n}\n/**\n * Tests that the `ref` of a component will return the correct instance\n *\n * This is determined by a given constructor i.e. a React.Component or HTMLElement for\n * components that forward their ref and attach it to a host component.\n *\n * @param {React.ReactElement} element\n * @param {() => ConformanceOptions} getOptions\n */\n\n\nfunction describeRef(element, getOptions) {\n  describe('ref', () => {\n    it(`attaches the ref`, () => {\n      // type def in ConformanceOptions\n      const {\n        inheritComponent,\n        mount,\n        refInstanceof\n      } = getOptions();\n      testRef(element, mount, (instance, wrapper) => {\n        expect(instance).to.be.instanceof(refInstanceof);\n\n        if (inheritComponent && instance.nodeType === 1) {\n          const rootHost = findOutermostIntrinsic(wrapper);\n          expect(instance).to.equal(rootHost.instance());\n        }\n      });\n    });\n  });\n}\n/**\n * Tests that the root component has the root class\n *\n * @param {React.ReactElement} element\n * @param {() => ConformanceOptions} getOptions\n */\n\n\nfunction testRootClass(element, getOptions) {\n  it('applies the root class to the root component if it has this class', () => {\n    const {\n      classes,\n      mount\n    } = getOptions();\n\n    if (classes.root == null) {\n      return;\n    }\n\n    const className = randomStringValue();\n    const wrapper = mount( /*#__PURE__*/React.cloneElement(element, {\n      className\n    })); // we established that the root component renders the outermost host previously. We immediately\n    // jump to the host component because some components pass the `root` class\n    // to the `classes` prop of the root component.\n    // https://github.com/mui-org/material-ui/blob/f9896bcd129a1209153106296b3d2487547ba205/packages/material-ui/src/OutlinedInput/OutlinedInput.js#L101\n\n    expect(findOutermostIntrinsic(wrapper).hasClass(classes.root)).to.equal(true);\n    expect(findOutermostIntrinsic(wrapper).hasClass(className)).to.equal(true);\n  });\n}\n/**\n * Tests that the component can be rendered with react-test-renderer.\n * This is important for snapshot testing with Jest (even if we don't encourage it).\n *\n * @param {React.ReactElement} element\n */\n\n\nfunction testReactTestRenderer(element) {\n  it('should render without errors in ReactTestRenderer', () => {\n    ReactTestRenderer.act(() => {\n      ReactTestRenderer.create(element, {\n        createNodeMock: node => {\n          return document.createElement(node.type);\n        }\n      });\n    });\n  });\n}\n\nconst fullSuite = {\n  componentProp: testComponentProp,\n  mergeClassName: testClassName,\n  propsSpread: testPropsSpread,\n  refForwarding: describeRef,\n  rootClass: testRootClass,\n  reactTestRenderer: testReactTestRenderer\n};\n/**\n * @typedef {Object} ConformanceOptions\n * @property {Record<string, string>} classes - `classes` of the component provided by `@material-ui/styles`\n * @property {string} inheritComponent - The element type that receives spread props.\n * @property {function} mount - Should be a return value from createMount\n * @property {(keyof typeof fullSuite)[]} [only] - If specified only run the tests listed\n * @property {any} refInstanceof - `ref` will be an instanceof this constructor.\n * @property {keyof typeof fullSuite[]} [skip] - Skip the specified tests\n * @property {string} [testComponentPropWith] - The host component that should be rendered instead.\n */\n\n/**\n * Tests various aspects of a component that should be equal across Material-UI\n * components.\n *\n * @param {React.ReactElement} minimalElement - the component with it's minimal required props\n * @param {() => ConformanceOptions} getOptions\n *\n */\n\nexport default function describeConformance(minimalElement, getOptions) {\n  const {\n    after: runAfterHook = () => {},\n    only = Object.keys(fullSuite),\n    skip = []\n  } = getOptions();\n  describe('Material-UI component API', () => {\n    after(runAfterHook);\n    Object.keys(fullSuite).filter(testKey => only.indexOf(testKey) !== -1 && skip.indexOf(testKey) === -1).forEach(testKey => {\n      const test = fullSuite[testKey];\n      test(minimalElement, getOptions);\n    });\n  });\n}"],"names":["findRootComponent","wrapper","component","outermostHostElement","findOutermostIntrinsic","getElement","find","filterWhere","componentWrapper","contains","randomStringValue","Math","random","toString","slice","fullSuite","componentProp","element","getOptions","describe","it","classes","mount","testComponentPropWith","React","cloneElement","expect","exists","to","equal","mergeClassName","className","hasClass","propsSpread","inheritComponent","testProp","value","root","props","refForwarding","refInstanceof","testRef","instance","be","instanceof","nodeType","rootHost","rootClass","reactTestRenderer","ReactTestRenderer","act","create","createNodeMock","node","document","createElement","type","minimalElement","after","runAfterHook","only","Object","keys","skip","filter","testKey","indexOf","forEach","test"],"mappings":"meAuBA,SAASA,EAAkBC,GAASC,UAClCA,IAEA,MAAMC,EAAuBC,UAAuBH,GAASI,aAC7D,OAAOJ,EAAQK,KAAKJ,GAAWK,aAAYC,GAClCA,EAAiBC,SAASN,KAIrC,SAASO,IACP,OAAOC,KAAKC,SAASC,SAAS,IAAIC,MAAM,GAiK1C,MAAMC,EAAY,CAChBC,cAlIF,SAA2BC,EAASC,GAClCC,SAAS,mBAAmB,KAC1BC,GAAG,+DAA+D,KAChE,MAAMC,QACJA,EAAOC,MACPA,EACAC,sBAAuBrB,EAAY,MACjCgB,IACEjB,EAAUqB,EAAoBE,EAAMC,aAAaR,EAAS,CAC9Df,UAAAA,KAEFwB,SAAO1B,EAAkBC,EAAS,CAChCoB,QAAAA,EACAnB,UAAAA,IACCyB,UAAUC,GAAGC,OAAM,UAqH1BC,eAxJF,SAAuBb,EAASC,GAC9BE,GAAG,+CAA+C,KAChD,MAAME,MACJA,GACEJ,IACEa,EAAYrB,IACZT,EAAUqB,EAAoBE,EAAMC,aAAaR,EAAS,CAC9Dc,UAAAA,KAEFL,SAAOtB,UAAuBH,GAAS+B,SAASD,IAAYH,GAAGC,OAAM,EAAM,sCAgJ7EI,YAzGF,SAAyBhB,EAASC,GAChCE,GAAG,uCAAuC,KAExC,MAAMC,QACJA,EAAOa,iBACPA,EAAgBZ,MAChBA,GACEJ,IACEiB,EAAW,yBACXC,EAAQ1B,IAIR2B,EAAOrC,EAHGsB,EAAoBE,EAAMC,aAAaR,EAAS,CAC9DkB,CAACA,GAAWC,KAE0B,CACtCf,QAAAA,EACAnB,UAAWgC,IAEbR,SAAOW,EAAKC,QAAQH,IAAWP,GAAGC,MAAMO,OAyF1CG,cA3EF,SAAqBtB,EAASC,GAC5BC,SAAS,OAAO,KACdC,GAAG,oBAAoB,KAErB,MAAMc,iBACJA,EAAgBZ,MAChBA,EAAKkB,cACLA,GACEtB,IACJuB,EAAQxB,EAASK,GAAO,CAACoB,EAAUzC,KAGjC,GAFAyB,SAAOgB,GAAUd,GAAGe,GAAGC,WAAWJ,GAE9BN,GAA0C,IAAtBQ,EAASG,SAAgB,CAC/C,MAAMC,EAAW1C,UAAuBH,GACxCyB,SAAOgB,GAAUd,GAAGC,MAAMiB,EAASJ,uBA8D3CK,UAhDF,SAAuB9B,EAASC,GAC9BE,GAAG,qEAAqE,KACtE,MAAMC,QACJA,EAAOC,MACPA,GACEJ,IAEJ,GAAoB,MAAhBG,EAAQgB,KACV,OAGF,MAAMN,EAAYrB,IACZT,EAAUqB,EAAoBE,EAAMC,aAAaR,EAAS,CAC9Dc,UAAAA,KAMFL,SAAOtB,UAAuBH,GAAS+B,SAASX,EAAQgB,OAAOT,GAAGC,OAAM,GACxEH,SAAOtB,UAAuBH,GAAS+B,SAASD,IAAYH,GAAGC,OAAM,OA6BvEmB,kBAlBF,SAA+B/B,GAC7BG,GAAG,qDAAqD,KACtD6B,UAAkBC,KAAI,KACpBD,UAAkBE,OAAOlC,EAAS,CAChCmC,eAAgBC,GACPC,SAASC,cAAcF,EAAKG,uBAmC9B,SAA6BC,EAAgBvC,GAC1D,MACEwC,MAAOC,EAAe,SAAQC,KAC9BA,EAAOC,OAAOC,KAAK/C,GAAUgD,KAC7BA,EAAO,IACL7C,IACJC,SAAS,6BAA6B,KACpCuC,MAAMC,GACNE,OAAOC,KAAK/C,GAAWiD,QAAOC,IAAsC,IAA3BL,EAAKM,QAAQD,KAA8C,IAA3BF,EAAKG,QAAQD,KAAiBE,SAAQF,KAE7GG,EADarD,EAAUkD,IAClBR,EAAgBvC"}