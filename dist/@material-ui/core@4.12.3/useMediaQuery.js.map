{"version":3,"file":"useMediaQuery.js","sources":["../../../node_modules/@material-ui/core/es/useMediaQuery/useMediaQuery.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { getThemeProps, useTheme } from '@material-ui/styles';\nexport default function useMediaQuery(queryInput, options = {}) {\n  const theme = useTheme();\n  const props = getThemeProps({\n    theme,\n    name: 'MuiUseMediaQuery',\n    props: {}\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['Material-UI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n\n  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, ''); // Wait for jsdom to support the match media feature.\n  // All the browsers Material-UI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n\n  const {\n    defaultMatches = false,\n    matchMedia = supportMatchMedia ? window.matchMedia : null,\n    noSsr = false,\n    ssrMatchMedia = null\n  } = _extends({}, props, options);\n\n  const [match, setMatch] = React.useState(() => {\n    if (noSsr && supportMatchMedia) {\n      return matchMedia(query).matches;\n    }\n\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n\n    return defaultMatches;\n  });\n  React.useEffect(() => {\n    let active = true;\n\n    if (!supportMatchMedia) {\n      return undefined;\n    }\n\n    const queryList = matchMedia(query);\n\n    const updateMatch = () => {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui-org/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n\n    updateMatch();\n    queryList.addListener(updateMatch);\n    return () => {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, matchMedia, supportMatchMedia]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue({\n      query,\n      match\n    });\n  }\n\n  return match;\n}"],"names":["queryInput","options","theme","useTheme","props","getThemeProps","name","process","env","NODE_ENV","console","error","join","query","replace","supportMatchMedia","window","matchMedia","defaultMatches","noSsr","ssrMatchMedia","_extends","match","setMatch","React","useState","matches","useEffect","active","queryList","updateMatch","addListener","removeListener","useDebugValue"],"mappings":"+XAGe,SAAuBA,EAAYC,EAAU,IAC1D,MAAMC,EAAQC,aACRC,EAAQC,gBAAc,CAC1BH,MAAAA,EACAI,KAAM,mBACNF,MAAO,KAGoB,eAAzBG,QAAQC,IAAIC,UACY,mBAAfT,GAAuC,OAAVE,GACtCQ,QAAQC,MAAM,CAAC,yDAA0D,+DAAgE,4DAA4DC,KAAK,OAI9M,IAAIC,EAA8B,mBAAfb,EAA4BA,EAAWE,GAASF,EACnEa,EAAQA,EAAMC,QAAQ,eAAgB,IAKtC,MAAMC,EAAsC,oBAAXC,aAAuD,IAAtBA,OAAOC,YAEnEC,eACJA,GAAiB,EAAKD,WACtBA,GAAaF,EAAoBC,OAAOC,WAAa,MAAIE,MACzDA,GAAQ,EAAKC,cACbA,EAAgB,MACdC,WAAS,GAAIjB,EAAOH,IAEjBqB,EAAOC,GAAYC,EAAMC,UAAS,IACnCN,GAASJ,EACJE,EAAWJ,GAAOa,QAGvBN,EACKA,EAAcP,GAAOa,QAKvBR,IAoCT,OAlCAM,EAAMG,WAAU,KACd,IAAIC,GAAS,EAEb,IAAKb,EACH,OAGF,MAAMc,EAAYZ,EAAWJ,GAEvBiB,EAAc,KAIdF,GACFL,EAASM,EAAUH,UAMvB,OAFAI,IACAD,EAAUE,YAAYD,GACf,KACLF,GAAS,EACTC,EAAUG,eAAeF,MAE1B,CAACjB,EAAOI,EAAYF,IAEM,eAAzBR,QAAQC,IAAIC,UAEde,EAAMS,cAAc,CAClBpB,MAAAA,EACAS,MAAAA,IAIGA"}