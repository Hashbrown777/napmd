{"version":3,"file":"Select.js","sources":["../../../node_modules/@material-ui/core/es/Select/Select.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { mergeClasses } from '@material-ui/styles';\nimport SelectInput from './SelectInput';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport withStyles from '../styles/withStyles';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport Input from '../Input';\nimport { styles as nativeSelectStyles } from '../NativeSelect/NativeSelect';\nimport NativeSelectInput from '../NativeSelect/NativeSelectInput';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\nexport const styles = nativeSelectStyles;\n\nvar _ref = /*#__PURE__*/React.createElement(Input, null);\n\nvar _ref2 = /*#__PURE__*/React.createElement(FilledInput, null);\n\nconst Select = /*#__PURE__*/React.forwardRef(function Select(props, ref) {\n  const {\n    autoWidth = false,\n    children,\n    classes,\n    displayEmpty = false,\n    IconComponent = ArrowDropDownIcon,\n    id,\n    input,\n    inputProps,\n    label,\n    labelId,\n    labelWidth = 0,\n    MenuProps,\n    multiple = false,\n    native = false,\n    onClose,\n    onOpen,\n    open,\n    renderValue,\n    SelectDisplayProps,\n    variant: variantProps = 'standard'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"autoWidth\", \"children\", \"classes\", \"displayEmpty\", \"IconComponent\", \"id\", \"input\", \"inputProps\", \"label\", \"labelId\", \"labelWidth\", \"MenuProps\", \"multiple\", \"native\", \"onClose\", \"onOpen\", \"open\", \"renderValue\", \"SelectDisplayProps\", \"variant\"]);\n\n  const inputComponent = native ? NativeSelectInput : SelectInput;\n  const muiFormControl = useFormControl();\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['variant']\n  });\n  const variant = fcs.variant || variantProps;\n  const InputComponent = input || {\n    standard: _ref,\n    outlined: /*#__PURE__*/React.createElement(OutlinedInput, {\n      label: label,\n      labelWidth: labelWidth\n    }),\n    filled: _ref2\n  }[variant];\n  return /*#__PURE__*/React.cloneElement(InputComponent, _extends({\n    // Most of the logic is implemented in `SelectInput`.\n    // The `Select` component is a simple API wrapper to expose something better to play with.\n    inputComponent,\n    inputProps: _extends({\n      children,\n      IconComponent,\n      variant,\n      type: undefined,\n      // We render a select. We can ignore the type provided by the `Input`.\n      multiple\n    }, native ? {\n      id\n    } : {\n      autoWidth,\n      displayEmpty,\n      labelId,\n      MenuProps,\n      onClose,\n      onOpen,\n      open,\n      renderValue,\n      SelectDisplayProps: _extends({\n        id\n      }, SelectDisplayProps)\n    }, inputProps, {\n      classes: inputProps ? mergeClasses({\n        baseClasses: classes,\n        newClasses: inputProps.classes,\n        Component: Select\n      }) : classes\n    }, input ? input.props.inputProps : {}),\n    ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Select.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the width of the popover will automatically be set according to the items inside the\n   * menu, otherwise it will be at least the width of the select input.\n   */\n  autoWidth: PropTypes.bool,\n\n  /**\n   * The option elements to populate the select with.\n   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.\n   *\n   * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The default element value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, a value is displayed even if no items are selected.\n   *\n   * In order to display a meaningful value, a function should be passed to the `renderValue` prop which returns the value to be displayed when no items are selected.\n   * You can only use it when the `native` prop is `false` (default).\n   */\n  displayEmpty: PropTypes.bool,\n\n  /**\n   * The icon that displays the arrow.\n   */\n  IconComponent: PropTypes.elementType,\n\n  /**\n   * The `id` of the wrapper element or the `select` element when `native`.\n   */\n  id: PropTypes.string,\n\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   */\n  input: PropTypes.element,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   * When `native` is `true`, the attributes are applied on the `select` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * See [OutlinedInput#label](/api/outlined-input/#props)\n   */\n  label: PropTypes.node,\n\n  /**\n   * The ID of an element that acts as an additional label. The Select will\n   * be labelled by the additional label and the selected value.\n   */\n  labelId: PropTypes.string,\n\n  /**\n   * See [OutlinedInput#label](/api/outlined-input/#props)\n   */\n  labelWidth: PropTypes.number,\n\n  /**\n   * Props applied to the [`Menu`](/api/menu/) element.\n   */\n  MenuProps: PropTypes.object,\n\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * If `true`, the component will be using a native `select` element.\n   */\n  native: PropTypes.bool,\n\n  /**\n   * Callback function fired when a menu item is selected.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (any).\n   * @param {object} [child] The react element that was selected when `native` is `false` (default).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Control `select` open state.\n   * You can only use it when the `native` prop is `false` (default).\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Render the selected value.\n   * You can only use it when the `native` prop is `false` (default).\n   *\n   * @param {any} value The `value` provided to the component.\n   * @returns {ReactNode}\n   */\n  renderValue: PropTypes.func,\n\n  /**\n   * Props applied to the clickable div element.\n   */\n  SelectDisplayProps: PropTypes.object,\n\n  /**\n   * The input value. Providing an empty string will select no options.\n   * This prop is required when the `native` prop is `false` (default).\n   * Set to an empty string `''` if you don't want any of the available options to be selected.\n   *\n   * If the value is an object it must have reference equality with the option in order to be selected.\n   * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nSelect.muiName = 'Select';\nexport default withStyles(styles, {\n  name: 'MuiSelect'\n})(Select);"],"names":["styles","nativeSelectStyles","_ref","React","createElement","Input","_ref2","FilledInput","Select","forwardRef","props","ref","autoWidth","children","classes","displayEmpty","IconComponent","ArrowDropDownIcon","id","input","inputProps","label","labelId","labelWidth","MenuProps","multiple","native","onClose","onOpen","open","renderValue","SelectDisplayProps","variant","variantProps","other","_objectWithoutPropertiesLoose","inputComponent","NativeSelectInput","SelectInput","muiFormControl","useFormControl","formControlState","states","InputComponent","standard","outlined","OutlinedInput","filled","cloneElement","_extends","type","undefined","mergeClasses","baseClasses","newClasses","Component","process","env","NODE_ENV","propTypes","PropTypes","bool","node","object","defaultValue","any","elementType","string","element","number","onChange","func","value","oneOf","muiName","withStyles","name"],"mappings":"8iEAeaA,GAASC,SAEtB,IAAIC,GAAoBC,GAAMC,cAAcC,UAAO,MAE/CC,GAAqBH,GAAMC,cAAcG,UAAa,MAE1D,MAAMC,GAAsBL,GAAMM,YAAW,SAASD,EAAOE,EAAOC,GAClE,MAAMC,UACJA,GAAY,EAAKC,SACjBA,EAAQC,QACRA,EAAOC,aACPA,GAAe,EAAKC,cACpBA,EAAgBC,EAAiBC,GACjCA,EAAEC,MACFA,EAAKC,WACLA,EAAUC,MACVA,EAAKC,QACLA,EAAOC,WACPA,EAAa,EAACC,UACdA,EAASC,SACTA,GAAW,EAAKC,OAChBA,GAAS,EAAKC,QACdA,EAAOC,OACPA,EAAMC,KACNA,EAAIC,YACJA,EAAWC,mBACXA,EACAC,QAASC,EAAe,YACtBvB,EACEwB,EAAQC,gCAA8BzB,EAAO,CAAC,YAAa,WAAY,UAAW,eAAgB,gBAAiB,KAAM,QAAS,aAAc,QAAS,UAAW,aAAc,YAAa,WAAY,SAAU,UAAW,SAAU,OAAQ,cAAe,qBAAsB,YAEvR0B,EAAiBV,EAASW,EAAoBC,EAC9CC,EAAiBC,IAMjBR,EALMS,EAAiB,CAC3B/B,MAAAA,EACA6B,eAAAA,EACAG,OAAQ,CAAC,aAESV,SAAWC,EACzBU,EAAiBxB,GAAS,CAC9ByB,SAAU1C,GACV2C,SAAuB1C,GAAMC,cAAc0C,UAAe,CACxDzB,MAAOA,EACPE,WAAYA,IAEdwB,OAAQzC,IACR0B,GACF,OAAoB7B,GAAM6C,aAAaL,EAAgBM,WAAS,CAG9Db,eAAAA,EACAhB,WAAY6B,WAAS,CACnBpC,SAAAA,EACAG,cAAAA,EACAgB,QAAAA,EACAkB,UAAMC,EAEN1B,SAAAA,GACCC,EAAS,CACVR,GAAAA,GACE,CACFN,UAAAA,EACAG,aAAAA,EACAO,QAAAA,EACAE,UAAAA,EACAG,QAAAA,EACAC,OAAAA,EACAC,KAAAA,EACAC,YAAAA,EACAC,mBAAoBkB,WAAS,CAC3B/B,GAAAA,GACCa,IACFX,EAAY,CACbN,QAASM,EAAagC,eAAa,CACjCC,YAAavC,EACbwC,WAAYlC,EAAWN,QACvByC,UAAW/C,IACRM,GACJK,EAAQA,EAAMT,MAAMU,WAAa,IACpCT,IAAAA,GACCuB,OAEoB,eAAzBsB,QAAQC,IAAIC,WAA4BlD,GAAOmD,UAAY,CAUzD/C,UAAWgD,WAAUC,KAQrBhD,SAAU+C,WAAUE,KAMpBhD,QAAS8C,WAAUG,OAKnBC,aAAcJ,WAAUK,IAQxBlD,aAAc6C,WAAUC,KAKxB7C,cAAe4C,WAAUM,YAKzBhD,GAAI0C,WAAUO,OAKdhD,MAAOyC,WAAUQ,QAMjBhD,WAAYwC,WAAUG,OAKtB1C,MAAOuC,WAAUE,KAMjBxC,QAASsC,WAAUO,OAKnB5C,WAAYqC,WAAUS,OAKtB7C,UAAWoC,WAAUG,OAKrBtC,SAAUmC,WAAUC,KAKpBnC,OAAQkC,WAAUC,KASlBS,SAAUV,WAAUW,KAQpB5C,QAASiC,WAAUW,KAQnB3C,OAAQgC,WAAUW,KAMlB1C,KAAM+B,WAAUC,KAShB/B,YAAa8B,WAAUW,KAKvBxC,mBAAoB6B,WAAUG,OAU9BS,MAAOZ,WAAUK,IAKjBjC,QAAS4B,WAAUa,MAAM,CAAC,SAAU,WAAY,eAElDjE,GAAOkE,QAAU,gBACFC,EAAW3E,GAAQ,CAChC4E,KAAM,aADOD,CAEZnE"}