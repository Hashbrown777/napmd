define(["exports","./responsivePropType","./breakpoints","./merge","./memoize","prop-types","../extends","@material-ui/utils"],(function(e,n,r,t,o,i,a,p){const s={m:"margin",p:"padding"},d={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},u={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},m=o((e=>{if(e.length>2){if(!u[e])return[e];e=u[e]}const[n,r]=e.split(""),t=s[n],o=d[r]||"";return Array.isArray(o)?o.map((e=>t+e)):[t+o]})),g=["m","mt","mr","mb","ml","mx","my","p","pt","pr","pb","pl","px","py","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY"];function c(e){const n=e.spacing||8;return"number"==typeof n?e=>("production"!==process.env.NODE_ENV&&"number"!=typeof e&&console.error(`Material-UI: Expected spacing argument to be a number, got ${e}.`),n*e):Array.isArray(n)?e=>("production"!==process.env.NODE_ENV&&e>n.length-1&&console.error([`Material-UI: The value provided (${e}) overflows.`,`The supported values are: ${JSON.stringify(n)}.`,`${e} > ${n.length-1}, you need to add the missing values.`].join("\n")),n[e]):"function"==typeof n?n:("production"!==process.env.NODE_ENV&&console.error([`Material-UI: The \`theme.spacing\` value (${n}) is invalid.`,"It should be a number, an array or a function."].join("\n")),()=>{})}function l(e,n){return r=>e.reduce(((e,t)=>(e[t]=function(e,n){if("string"==typeof n||null==n)return n;const r=e(Math.abs(n));return n>=0?r:"number"==typeof r?-r:`-${r}`}(n,r),e)),{})}function f(e){const n=c(e.theme);return Object.keys(e).map((t=>{if(-1===g.indexOf(t))return null;const o=l(m(t),n),i=e[t];return r.handleBreakpoints(e,i,o)})).reduce(t,{})}f.propTypes="production"!==process.env.NODE_ENV?g.reduce(((e,r)=>(e[r]=n,e)),{}):{},f.filterProps=g,e.createUnarySpacing=c,e.default=f,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=spacing.js.map
