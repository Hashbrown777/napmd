{"version":3,"file":"ToggleButtonGroup.js","sources":["../../../node_modules/@material-ui/lab/es/ToggleButtonGroup/ToggleButtonGroup.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport isValueSelected from './isValueSelected';\nimport { withStyles } from '@material-ui/core/styles';\nimport { capitalize } from '@material-ui/core/utils';\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'inline-flex',\n    borderRadius: theme.shape.borderRadius\n  },\n\n  /* Styles applied to the root element if `orientation=\"vertical\"`. */\n  vertical: {\n    flexDirection: 'column'\n  },\n\n  /* Styles applied to the children. */\n  grouped: {},\n\n  /* Styles applied to the children if `orientation=\"horizontal\"`. */\n  groupedHorizontal: {\n    '&:not(:first-child)': {\n      marginLeft: -1,\n      borderLeft: '1px solid transparent',\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0\n    },\n    '&:not(:last-child)': {\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0\n    }\n  },\n\n  /* Styles applied to the children if `orientation=\"vertical\"`. */\n  groupedVertical: {\n    '&:not(:first-child)': {\n      marginTop: -1,\n      borderTop: '1px solid transparent',\n      borderTopLeftRadius: 0,\n      borderTopRightRadius: 0\n    },\n    '&:not(:last-child)': {\n      borderBottomLeftRadius: 0,\n      borderBottomRightRadius: 0\n    }\n  }\n});\nconst ToggleButtonGroup = /*#__PURE__*/React.forwardRef(function ToggleButton(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    exclusive = false,\n    onChange,\n    orientation = 'horizontal',\n    size = 'medium',\n    value\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"children\", \"classes\", \"className\", \"exclusive\", \"onChange\", \"orientation\", \"size\", \"value\"]);\n\n  const handleChange = (event, buttonValue) => {\n    if (!onChange) {\n      return;\n    }\n\n    const index = value && value.indexOf(buttonValue);\n    let newValue;\n\n    if (value && index >= 0) {\n      newValue = value.slice();\n      newValue.splice(index, 1);\n    } else {\n      newValue = value ? value.concat(buttonValue) : [buttonValue];\n    }\n\n    onChange(event, newValue);\n  };\n\n  const handleExclusiveChange = (event, buttonValue) => {\n    if (!onChange) {\n      return;\n    }\n\n    onChange(event, value === buttonValue ? null : buttonValue);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    role: \"group\",\n    className: clsx(classes.root, className, orientation === 'vertical' && classes.vertical),\n    ref: ref\n  }, other), React.Children.map(children, child => {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return null;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: The ToggleButtonGroup component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    return /*#__PURE__*/React.cloneElement(child, {\n      className: clsx(classes.grouped, classes[`grouped${capitalize(orientation)}`], child.props.className),\n      onChange: exclusive ? handleExclusiveChange : handleChange,\n      selected: child.props.selected === undefined ? isValueSelected(child.props.value, value) : child.props.selected,\n      size: child.props.size || size\n    });\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? ToggleButtonGroup.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * The content of the button.\r\n   */\n  children: PropTypes.node,\n\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css) below for more details.\r\n   */\n  classes: PropTypes.object,\n\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * If `true`, only allow one of the child ToggleButton values to be selected.\r\n   */\n  exclusive: PropTypes.bool,\n\n  /**\r\n   * Callback fired when the value changes.\r\n   *\r\n   * @param {object} event The event source of the callback.\r\n   * @param {any} value of the selected buttons. When `exclusive` is true\r\n   * this is a single value; when false an array of selected values. If no value\r\n   * is selected and `exclusive` is true the value is null; when false an empty array.\r\n   */\n  onChange: PropTypes.func,\n\n  /**\r\n   * The group orientation (layout flow direction).\r\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n  /**\r\n   * The size of the buttons.\r\n   */\n  size: PropTypes.oneOf(['large', 'medium', 'small']),\n\n  /**\r\n   * The currently selected value within the group or an array of selected\r\n   * values when `exclusive` is false.\r\n   *\r\n   * The value must have reference equality with the option in order to be selected.\r\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiToggleButtonGroup'\n})(ToggleButtonGroup);"],"names":["styles","theme","root","display","borderRadius","shape","vertical","flexDirection","grouped","groupedHorizontal","marginLeft","borderLeft","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","groupedVertical","marginTop","borderTop","ToggleButtonGroup","React","forwardRef","props","ref","children","classes","className","exclusive","onChange","orientation","size","value","other","_objectWithoutPropertiesLoose","handleChange","event","buttonValue","index","indexOf","newValue","slice","splice","concat","handleExclusiveChange","createElement","_extends","role","clsx","Children","map","child","isValidElement","process","env","NODE_ENV","isFragment","console","error","join","cloneElement","capitalize","selected","undefined","isValueSelected","propTypes","PropTypes","node","object","string","bool","func","oneOf","any","withStyles","name"],"mappings":"2nBASaA,EAASC,KAEpBC,KAAM,CACJC,QAAS,cACTC,aAAcH,EAAMI,MAAMD,cAI5BE,SAAU,CACRC,cAAe,UAIjBC,QAAS,GAGTC,kBAAmB,CACjB,sBAAuB,CACrBC,YAAa,EACbC,WAAY,wBACZC,oBAAqB,EACrBC,uBAAwB,GAE1B,qBAAsB,CACpBC,qBAAsB,EACtBC,wBAAyB,IAK7BC,gBAAiB,CACf,sBAAuB,CACrBC,WAAY,EACZC,UAAW,wBACXN,oBAAqB,EACrBE,qBAAsB,GAExB,qBAAsB,CACpBD,uBAAwB,EACxBE,wBAAyB,MAIzBI,EAAiCC,EAAMC,YAAW,SAAsBC,EAAOC,GACnF,MAAMC,SACJA,EAAQC,QACRA,EAAOC,UACPA,EAASC,UACTA,GAAY,EAAKC,SACjBA,EAAQC,YACRA,EAAc,aAAYC,KAC1BA,EAAO,SAAQC,MACfA,GACET,EACEU,EAAQC,gCAA8BX,EAAO,CAAC,WAAY,UAAW,YAAa,YAAa,WAAY,cAAe,OAAQ,UAElIY,EAAe,CAACC,EAAOC,KAC3B,IAAKR,EACH,OAGF,MAAMS,EAAQN,GAASA,EAAMO,QAAQF,GACrC,IAAIG,EAEAR,GAASM,GAAS,GACpBE,EAAWR,EAAMS,QACjBD,EAASE,OAAOJ,EAAO,IAEvBE,EAAWR,EAAQA,EAAMW,OAAON,GAAe,CAACA,GAGlDR,EAASO,EAAOI,IAGZI,EAAwB,CAACR,EAAOC,KAC/BR,GAILA,EAASO,EAAOJ,IAAUK,EAAc,KAAOA,IAGjD,OAAoBhB,EAAMwB,cAAc,MAAOC,WAAS,CACtDC,KAAM,QACNpB,UAAWqB,UAAKtB,EAAQvB,KAAMwB,EAA2B,aAAhBG,GAA8BJ,EAAQnB,UAC/EiB,IAAKA,GACJS,GAAQZ,EAAM4B,SAASC,IAAIzB,GAAU0B,GACnB9B,EAAM+B,eAAeD,IAIX,eAAzBE,QAAQC,IAAIC,UACVC,aAAWL,IACbM,QAAQC,MAAM,CAAC,qFAAsF,wCAAwCC,KAAK,OAIlItC,EAAMuC,aAAaT,EAAO,CAC5CxB,UAAWqB,UAAKtB,EAAQjB,QAASiB,EAAQ,UAAUmC,aAAW/B,MAAiBqB,EAAM5B,MAAMI,WAC3FE,SAAUD,EAAYgB,EAAwBT,EAC9C2B,cAAmCC,IAAzBZ,EAAM5B,MAAMuC,SAAyBE,EAAgBb,EAAM5B,MAAMS,MAAOA,GAASmB,EAAM5B,MAAMuC,SACvG/B,KAAMoB,EAAM5B,MAAMQ,MAAQA,KAbnB,WAiBY,eAAzBsB,QAAQC,IAAIC,WAA4BnC,EAAkB6C,UAAY,CASpExC,SAAUyC,UAAUC,KAMpBzC,QAASwC,UAAUE,OAKnBzC,UAAWuC,UAAUG,OAKrBzC,UAAWsC,UAAUI,KAUrBzC,SAAUqC,UAAUK,KAKpBzC,YAAaoC,UAAUM,MAAM,CAAC,aAAc,aAK5CzC,KAAMmC,UAAUM,MAAM,CAAC,QAAS,SAAU,UAQ1CxC,MAAOkC,UAAUO,YAEJC,aAAWzE,EAAQ,CAChC0E,KAAM,wBADOD,CAEZtD"}