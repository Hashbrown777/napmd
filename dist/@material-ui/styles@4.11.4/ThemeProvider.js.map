{"version":3,"file":"ThemeProvider.js","sources":["../../../node_modules/@material-ui/styles/es/ThemeProvider/ThemeProvider.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp } from '@material-ui/utils';\nimport ThemeContext from '../useTheme/ThemeContext';\nimport useTheme from '../useTheme';\nimport nested from './nested'; // To support composition of theme.\n\nfunction mergeOuterLocalTheme(outerTheme, localTheme) {\n  if (typeof localTheme === 'function') {\n    const mergedTheme = localTheme(outerTheme);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!mergedTheme) {\n        console.error(['Material-UI: You should return an object from your theme function, i.e.', '<ThemeProvider theme={() => ({})} />'].join('\\n'));\n      }\n    }\n\n    return mergedTheme;\n  }\n\n  return _extends({}, outerTheme, localTheme);\n}\n/**\n * This component takes a `theme` prop.\n * It makes the `theme` available down the React tree thanks to React context.\n * This component should preferably be used at **the root of your component tree**.\n */\n\n\nfunction ThemeProvider(props) {\n  const {\n    children,\n    theme: localTheme\n  } = props;\n  const outerTheme = useTheme();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (outerTheme === null && typeof localTheme === 'function') {\n      console.error(['Material-UI: You are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\\n'));\n    }\n  }\n\n  const theme = React.useMemo(() => {\n    const output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);\n\n    if (output != null) {\n      output[nested] = outerTheme !== null;\n    }\n\n    return output;\n  }, [localTheme, outerTheme]);\n  return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n    value: theme\n  }, children);\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * A theme object. You can provide a function to extend the outer theme.\n   */\n  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;\n}\n\nexport default ThemeProvider;"],"names":["ThemeProvider","props","children","theme","localTheme","outerTheme","useTheme","process","env","NODE_ENV","console","error","join","React","useMemo","output","mergedTheme","_extends","mergeOuterLocalTheme","nested","createElement","ThemeContext","Provider","value","propTypes","PropTypes","node","isRequired","oneOfType","object","func","exactProp"],"mappings":"+PA8BA,SAASA,EAAcC,GACrB,MAAMC,SACJA,EACAC,MAAOC,GACLH,EACEI,EAAaC,IAEU,eAAzBC,QAAQC,IAAIC,UACK,OAAfJ,GAA6C,mBAAfD,GAChCM,QAAQC,MAAM,CAAC,uFAAwF,qDAAsD,GAAI,sCAAuC,6FAAkGC,KAAK,OAInT,MAAMT,EAAQU,UAAMC,SAAQ,KAC1B,MAAMC,EAAwB,OAAfV,EAAsBD,EApCzC,SAA8BC,EAAYD,GACxC,GAA0B,mBAAfA,EAA2B,CACpC,MAAMY,EAAcZ,EAAWC,GAQ/B,MAN6B,eAAzBE,QAAQC,IAAIC,WACTO,GACHN,QAAQC,MAAM,CAAC,0EAA2E,wCAAwCC,KAAK,QAIpII,EAGT,OAAOC,WAAS,GAAIZ,EAAYD,GAuBoBc,CAAqBb,EAAYD,GAMnF,OAJc,MAAVW,IACFA,EAAOI,GAAyB,OAAfd,GAGZU,IACN,CAACX,EAAYC,IAChB,OAAoBQ,UAAMO,cAAcC,EAAaC,SAAU,CAC7DC,MAAOpB,GACND,SAGoB,eAAzBK,QAAQC,IAAIC,WAA4BT,EAAcwB,UAAY,CAIhEtB,SAAUuB,UAAUC,KAAKC,WAKzBxB,MAAOsB,UAAUG,UAAU,CAACH,UAAUI,OAAQJ,UAAUK,OAAOH,aAGpC,eAAzBpB,QAAQC,IAAIC,UACW,eAAzBF,QAAQC,IAAIC,WAA4BT,EAAcwB,UAAYO,YAAU/B,EAAcwB"}