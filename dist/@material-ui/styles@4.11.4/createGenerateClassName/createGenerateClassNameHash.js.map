{"version":3,"file":"createGenerateClassNameHash.js","sources":["../../../../node_modules/@material-ui/styles/es/createGenerateClassName/createGenerateClassNameHash.js"],"sourcesContent":["import hash from '@emotion/hash';\n\nfunction safePrefix(classNamePrefix) {\n  const prefix = String(classNamePrefix);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (prefix.length >= 256) {\n      console.error(`Material-UI: The class name prefix is too long: ${prefix}.`);\n    }\n  }\n\n  return prefix;\n}\n\nconst themeHashCache = {};\n/**\n * Beta feature.\n *\n * This is an alternative to createGenerateClassName.js.\n * Instead of using a index counter, it hash the style sheets to generate the class name.\n * The class name call order invariant. With this property, we can cache the style sheets on the server.\n */\n\nexport default function createGenerateClassNameHash(options = {}) {\n  const {\n    dangerouslyUseGlobalCSS = false,\n    productionPrefix = 'jss',\n    seed = ''\n  } = options;\n  let ruleCounter = 0;\n  return (rule, styleSheet) => {\n    const isStatic = !styleSheet.options.link;\n\n    if (dangerouslyUseGlobalCSS && styleSheet && styleSheet.options.name && isStatic) {\n      return `${safePrefix(styleSheet.options.name)}-${rule.key}`;\n    }\n\n    let suffix; // It's a static rule.\n\n    if (isStatic) {\n      let themeHash = themeHashCache[styleSheet.options.theme];\n\n      if (!themeHash) {\n        themeHash = hash(JSON.stringify(styleSheet.options.theme));\n        themeHashCache[styleSheet.theme] = themeHash;\n      }\n\n      const raw = styleSheet.rules.raw[rule.key];\n      suffix = hash(`${themeHash}${rule.key}${JSON.stringify(raw)}`);\n    }\n\n    if (!suffix) {\n      ruleCounter += 1;\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (ruleCounter >= 1e10) {\n          console.warn(['Material-UI: You might have a memory leak.', 'The ruleCounter is not supposed to grow that much.'].join(''));\n        }\n      }\n\n      suffix = ruleCounter;\n    }\n\n    if (process.env.NODE_ENV === 'production') {\n      return `${productionPrefix}${seed}${suffix}`;\n    } // Help with debuggability.\n\n\n    if (styleSheet.options.classNamePrefix) {\n      return `${safePrefix(styleSheet.options.classNamePrefix)}-${rule.key}-${seed}${suffix}`;\n    }\n\n    return `${rule.key}-${seed}${suffix}`;\n  };\n}"],"names":["safePrefix","classNamePrefix","prefix","String","process","env","NODE_ENV","length","console","error","themeHashCache","options","dangerouslyUseGlobalCSS","productionPrefix","seed","ruleCounter","rule","styleSheet","isStatic","link","name","key","suffix","themeHash","theme","hash","JSON","stringify","raw","rules","warn","join"],"mappings":"yHAEA,SAASA,EAAWC,GAClB,MAAMC,EAASC,OAAOF,GAQtB,MAN6B,eAAzBG,QAAQC,IAAIC,UACVJ,EAAOK,QAAU,KACnBC,QAAQC,MAAM,mDAAmDP,MAI9DA,EAGT,MAAMQ,EAAiB,UASR,SAAqCC,EAAU,IAC5D,MAAMC,wBACJA,GAA0B,EAAKC,iBAC/BA,EAAmB,MAAKC,KACxBA,EAAO,IACLH,EACJ,IAAII,EAAc,EAClB,MAAO,CAACC,EAAMC,KACZ,MAAMC,GAAYD,EAAWN,QAAQQ,KAErC,GAAIP,GAA2BK,GAAcA,EAAWN,QAAQS,MAAQF,EACtE,MAAO,GAAGlB,EAAWiB,EAAWN,QAAQS,SAASJ,EAAKK,MAGxD,IAAIC,EAEJ,GAAIJ,EAAU,CACZ,IAAIK,EAAYb,EAAeO,EAAWN,QAAQa,OAE7CD,IACHA,EAAYE,UAAKC,KAAKC,UAAUV,EAAWN,QAAQa,QACnDd,EAAeO,EAAWO,OAASD,GAGrC,MAAMK,EAAMX,EAAWY,MAAMD,IAAIZ,EAAKK,KACtCC,EAASG,UAAK,GAAGF,IAAYP,EAAKK,MAAMK,KAAKC,UAAUC,MAezD,OAZKN,IACHP,GAAe,EAEc,eAAzBX,QAAQC,IAAIC,UACVS,GAAe,MACjBP,QAAQsB,KAAK,CAAC,6CAA8C,sDAAsDC,KAAK,KAI3HT,EAASP,GAGkB,eAAzBX,QAAQC,IAAIC,SACP,GAAGO,IAAmBC,IAAOQ,IAIlCL,EAAWN,QAAQV,gBACd,GAAGD,EAAWiB,EAAWN,QAAQV,oBAAoBe,EAAKK,OAAOP,IAAOQ,IAG1E,GAAGN,EAAKK,OAAOP,IAAOQ"}