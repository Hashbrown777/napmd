define(["exports","mdast-util-to-markdown/lib/util/container-phrasing","mdast-util-to-markdown/lib/handle/inline-code","markdown-table"],(function(e,t,n,a){const l={enter:{table:function(e){const t=e._align;this.enter({type:"table",align:t,children:[]},e),this.setData("inTable",!0)},tableData:i,tableHeader:i,tableRow:function(e){this.enter({type:"tableRow",children:[]},e)}},exit:{codeText:function(e){let t=this.resume();this.getData("inTable")&&(t=t.replace(/\\([\\|])/g,c));this.stack[this.stack.length-1].value=t,this.exit(e)},table:function(e){this.exit(e),this.setData("inTable")},tableData:r,tableHeader:r,tableRow:r}};function r(e){this.exit(e)}function i(e){this.enter({type:"tableCell",children:[]},e)}function c(e,t){return"|"===t?t:e}e.gfmTableFromMarkdown=l,e.gfmTableToMarkdown=function(e){const l=e||{},r=l.tableCellPadding,i=l.tablePipeAlign,c=l.stringLength,o=r?" ":"|";return{unsafe:[{character:"\r",inConstruct:"tableCell"},{character:"\n",inConstruct:"tableCell"},{atBreak:!0,character:"|",after:"[\t :-]"},{character:"|",inConstruct:"tableCell"},{atBreak:!0,character:":",after:"-"},{atBreak:!0,character:"-",after:"[:|-]"}],handlers:{table:function(e,t,n){return u(function(e,t){const n=e.children;let a=-1;const l=[],r=t.enter("table");for(;++a<n.length;)l[a]=b(n[a],t);return r(),l}(e,n),e.align)},tableRow:function(e,t,n){const a=u([b(e,n)]);return a.slice(0,a.indexOf("\n"))},tableCell:s,inlineCode:function(e,t,a){let l=n.inlineCode(e,t,a);a.stack.includes("tableCell")&&(l=l.replace(/\|/g,"\\$&"));return l}}};function s(e,n,a){const l=a.enter("tableCell"),r=a.enter("phrasing"),i=t.containerPhrasing(e,a,{before:o,after:o});return r(),l(),i}function u(e,t){return a.markdownTable(e,{align:t,alignDelimiters:i,padding:r,stringLength:c})}function b(e,t){const n=e.children;let a=-1;const l=[],r=t.enter("tableRow");for(;++a<n.length;)l[a]=s(n[a],0,t);return r(),l}},Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=mdast-util-gfm-table@1.0.1.js.map
