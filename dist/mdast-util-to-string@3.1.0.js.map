{"version":3,"file":"mdast-util-to-string@3.1.0.js","sources":["../node_modules/mdast-util-to-string/index.js"],"sourcesContent":["/**\n * @typedef Options\n * @property {boolean} [includeImageAlt=true]\n */\n\n/**\n * Get the text content of a node.\n * Prefer the nodeâ€™s plain-text fields, otherwise serialize its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} node\n * @param {Options} [options]\n * @returns {string}\n */\nexport function toString(node, options) {\n  var {includeImageAlt = true} = options || {}\n  return one(node, includeImageAlt)\n}\n\n/**\n * @param {unknown} node\n * @param {boolean} includeImageAlt\n * @returns {string}\n */\nfunction one(node, includeImageAlt) {\n  return (\n    (node &&\n      typeof node === 'object' &&\n      // @ts-ignore looks like a literal.\n      (node.value ||\n        // @ts-ignore looks like an image.\n        (includeImageAlt ? node.alt : '') ||\n        // @ts-ignore looks like a parent.\n        ('children' in node && all(node.children, includeImageAlt)) ||\n        (Array.isArray(node) && all(node, includeImageAlt)))) ||\n    ''\n  )\n}\n\n/**\n * @param {Array.<unknown>} values\n * @param {boolean} includeImageAlt\n * @returns {string}\n */\nfunction all(values, includeImageAlt) {\n  /** @type {Array.<string>} */\n  var result = []\n  var index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt)\n  }\n\n  return result.join('')\n}\n"],"names":["one","node","includeImageAlt","value","alt","all","children","Array","isArray","values","result","index","length","join","options"],"mappings":"gCAwBA,SAASA,EAAIC,EAAMC,GACjB,OACGD,GACiB,iBAATA,IAENA,EAAKE,QAEHD,EAAkBD,EAAKG,IAAM,KAE7B,aAAcH,GAAQI,EAAIJ,EAAKK,SAAUJ,IACzCK,MAAMC,QAAQP,IAASI,EAAIJ,EAAMC,KACtC,GASJ,SAASG,EAAII,EAAQP,GAKnB,IAHA,IAAIQ,EAAS,GACTC,GAAS,IAEJA,EAAQF,EAAOG,QACtBF,EAAOC,GAASX,EAAIS,EAAOE,GAAQT,GAGrC,OAAOQ,EAAOG,KAAK,eAvCd,SAAkBZ,EAAMa,GAC7B,IAAIZ,gBAACA,GAAkB,GAAQY,GAAW,GAC1C,OAAOd,EAAIC,EAAMC"}