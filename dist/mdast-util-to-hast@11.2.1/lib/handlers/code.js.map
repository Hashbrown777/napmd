{"version":3,"file":"code.js","sources":["../../../../node_modules/mdast-util-to-hast/lib/handlers/code.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * @type {Handler}\n * @param {Code} node\n */\nexport function code(h, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splittingâ€™s been going\n  // on for years in remark now.\n  const lang = node.lang && node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/)\n  /** @type {Properties} */\n  const props = {}\n\n  if (lang) {\n    props.className = ['language-' + lang]\n  }\n\n  const code = h(node, 'code', props, [u('text', value)])\n\n  if (node.meta) {\n    code.data = {meta: node.meta}\n  }\n\n  return h(node.position, 'pre', [code])\n}\n"],"names":["h","node","value","lang","match","props","className","code","u","meta","data","position"],"mappings":"yDAaO,SAAcA,EAAGC,GACtB,MAAMC,EAAQD,EAAKC,MAAQD,EAAKC,MAAQ,KAAO,GAGzCC,EAAOF,EAAKE,MAAQF,EAAKE,KAAKC,MAAM,uBAEpCC,EAAQ,GAEVF,IACFE,EAAMC,UAAY,CAAC,YAAcH,IAGnC,MAAMI,EAAOP,EAAEC,EAAM,OAAQI,EAAO,CAACG,IAAE,OAAQN,KAM/C,OAJID,EAAKQ,OACPF,EAAKG,KAAO,CAACD,KAAMR,EAAKQ,OAGnBT,EAAEC,EAAKU,SAAU,MAAO,CAACJ"}