{"version":3,"file":"list.js","sources":["../../../../node_modules/mdast-util-to-hast/lib/handlers/list.js"],"sourcesContent":["/**\n * @typedef {import('mdast').List} List\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {wrap} from '../wrap.js'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {List} node\n * @returns {Element}\n */\nexport function list(h, node) {\n  /** @type {Properties} */\n  const props = {}\n  const name = node.ordered ? 'ol' : 'ul'\n  const items = all(h, node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    props.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < items.length) {\n    const item = items[index]\n\n    if (\n      item.type === 'element' &&\n      item.tagName === 'li' &&\n      item.properties &&\n      Array.isArray(item.properties.className) &&\n      item.properties.className.includes('task-list-item')\n    ) {\n      props.className = ['contains-task-list']\n      break\n    }\n  }\n\n  return h(node, name, props, wrap(items, true))\n}\n"],"names":["h","node","props","name","ordered","items","all","index","start","length","item","type","tagName","properties","Array","isArray","className","includes","wrap"],"mappings":"qFAeO,SAAcA,EAAGC,GAEtB,MAAMC,EAAQ,GACRC,EAAOF,EAAKG,QAAU,KAAO,KAC7BC,EAAQC,MAAIN,EAAGC,GACrB,IAAIM,GAAS,EAOb,IAL0B,iBAAfN,EAAKO,OAAqC,IAAfP,EAAKO,QACzCN,EAAMM,MAAQP,EAAKO,SAIZD,EAAQF,EAAMI,QAAQ,CAC7B,MAAMC,EAAOL,EAAME,GAEnB,GACgB,YAAdG,EAAKC,MACY,OAAjBD,EAAKE,SACLF,EAAKG,YACLC,MAAMC,QAAQL,EAAKG,WAAWG,YAC9BN,EAAKG,WAAWG,UAAUC,SAAS,kBACnC,CACAf,EAAMc,UAAY,CAAC,sBACnB,OAIJ,OAAOhB,EAAEC,EAAME,EAAMD,EAAOgB,OAAKb,GAAO"}