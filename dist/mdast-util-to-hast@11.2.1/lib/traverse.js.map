{"version":3,"file":"traverse.js","sources":["../../../node_modules/mdast-util-to-hast/lib/traverse.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode\n * @typedef {import('./index.js').H} H\n * @typedef {import('./index.js').Handler} Handler\n * @typedef {import('./index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Transform an unknown node.\n * @type {Handler}\n * @param {MdastNode} node\n */\nfunction unknown(h, node) {\n  const data = node.data || {}\n\n  if (\n    'value' in node &&\n    !(\n      own.call(data, 'hName') ||\n      own.call(data, 'hProperties') ||\n      own.call(data, 'hChildren')\n    )\n  ) {\n    return h.augment(node, u('text', node.value))\n  }\n\n  return h(node, 'div', all(h, node))\n}\n\n/**\n * @type {Handler}\n * @param {MdastNode} node\n */\nexport function one(h, node, parent) {\n  const type = node && node.type\n  /** @type {Handler} */\n  let fn\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(h.handlers, type)) {\n    fn = h.handlers[type]\n  } else if (h.passThrough && h.passThrough.includes(type)) {\n    fn = returnNode\n  } else {\n    fn = h.unknownHandler\n  }\n\n  return (typeof fn === 'function' ? fn : unknown)(h, node, parent)\n}\n\n/**\n * @type {Handler}\n * @param {MdastNode} node\n */\nfunction returnNode(h, node) {\n  // @ts-expect-error: Pass through custom node.\n  return 'children' in node ? {...node, children: all(h, node)} : node\n}\n\n/**\n * @param {H} h\n * @param {MdastNode} parent\n */\nexport function all(h, parent) {\n  /** @type {Array.<Content>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n\n    while (++index < nodes.length) {\n      const result = one(h, nodes[index], parent)\n\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n"],"names":["own","hasOwnProperty","unknown","h","node","data","call","augment","u","value","all","one","parent","type","fn","Error","handlers","passThrough","includes","returnNode","unknownHandler","children","values","nodes","index","length","result","Array","isArray","replace","head","push"],"mappings":"kDASA,MAAMA,EAAM,GAAGC,eAOf,SAASC,EAAQC,EAAGC,GAClB,MAAMC,EAAOD,EAAKC,MAAQ,GAE1B,MACE,UAAWD,KAETJ,EAAIM,KAAKD,EAAM,UACfL,EAAIM,KAAKD,EAAM,gBACfL,EAAIM,KAAKD,EAAM,cAGVF,EAAEI,QAAQH,EAAMI,IAAE,OAAQJ,EAAKK,QAGjCN,EAAEC,EAAM,MAAOM,EAAIP,EAAGC,IAOxB,SAASO,EAAIR,EAAGC,EAAMQ,GAC3B,MAAMC,EAAOT,GAAQA,EAAKS,KAE1B,IAAIC,EAGJ,IAAKD,EACH,MAAM,IAAIE,MAAM,uBAAyBX,EAAO,KAWlD,OAPEU,EADEd,EAAIM,KAAKH,EAAEa,SAAUH,GAClBV,EAAEa,SAASH,GACPV,EAAEc,aAAed,EAAEc,YAAYC,SAASL,GAC5CM,EAEAhB,EAAEiB,gBAGa,mBAAPN,EAAoBA,EAAKZ,GAASC,EAAGC,EAAMQ,GAO5D,SAASO,EAAWhB,EAAGC,GAErB,MAAO,aAAcA,EAAO,IAAIA,EAAMiB,SAAUX,EAAIP,EAAGC,IAASA,EAO3D,SAASM,EAAIP,EAAGS,GAErB,MAAMU,EAAS,GAEf,GAAI,aAAcV,EAAQ,CACxB,MAAMW,EAAQX,EAAOS,SACrB,IAAIG,GAAS,EAEb,OAASA,EAAQD,EAAME,QAAQ,CAC7B,MAAMC,EAASf,EAAIR,EAAGoB,EAAMC,GAAQZ,GAEpC,GAAIc,EAAQ,CACV,GAAIF,GAAmC,UAA1BD,EAAMC,EAAQ,GAAGX,OACvBc,MAAMC,QAAQF,IAA2B,SAAhBA,EAAOb,OACnCa,EAAOjB,MAAQiB,EAAOjB,MAAMoB,QAAQ,OAAQ,MAGzCF,MAAMC,QAAQF,IAA2B,YAAhBA,EAAOb,MAAoB,CACvD,MAAMiB,EAAOJ,EAAOL,SAAS,GAEzBS,GAAsB,SAAdA,EAAKjB,OACfiB,EAAKrB,MAAQqB,EAAKrB,MAAMoB,QAAQ,OAAQ,KAK1CF,MAAMC,QAAQF,GAChBJ,EAAOS,QAAQL,GAEfJ,EAAOS,KAAKL,KAMpB,OAAOJ"}