{"version":3,"file":"lib.js","sources":["../../node_modules/mdast-util-to-hast/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode\n * @typedef {import('hast').Root|import('hast').Parent['children'][number]} HastNode\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').ElementContent} Content\n * @typedef {import('unist-util-position').PositionLike} PositionLike\n *\n * @typedef EmbeddedHastFields\n * @property {string} [hName] Defines the tag name of an element\n * @property {Properties} [hProperties] Defines the properties of an element\n * @property {Array.<Content>} [hChildren] Defines the (hast) children of an element\n *\n * @typedef {Object.<string, unknown> & EmbeddedHastFields} Data unist data with embedded hast fields\n *\n * @typedef {MdastNode & {data?: Data}} NodeWithData unist node with embedded hast data\n *\n * @callback Handler\n * @param {H} h Handle context\n * @param {any} node mdast node to handle\n * @param {Parent|null} parent Parent of `node`\n * @returns {Content|Array.<Content>|null|undefined} hast node\n *\n * @callback HFunctionProps\n * @param {MdastNode|PositionLike|null|undefined} node mdast node or unist position\n * @param {string} tagName HTML tag name\n * @param {Properties} props Properties\n * @param {Array.<Content>?} [children] hast content\n * @returns {Element}\n *\n * @callback HFunctionNoProps\n * @param {MdastNode|PositionLike|null|undefined} node mdast node or unist position\n * @param {string} tagName HTML tag name\n * @param {Array.<Content>?} [children] hast content\n * @returns {Element}\n *\n * @typedef HFields\n * @property {boolean} dangerous Whether HTML is allowed\n * @property {(identifier: string) => Definition|null} definition Definition cache\n * @property {Object.<string, FootnoteDefinition>} footnoteById Footnote cache\n * @property {Array.<string>} footnoteOrder Order in which footnotes occur\n * @property {Handlers} handlers Applied handlers\n * @property {Handler} unknownHandler Handler for any none not in `passThrough` or otherwise handled\n * @property {(left: NodeWithData|PositionLike|null|undefined, right: Content) => Content} augment Like `h` but lower-level and usable on non-elements.\n * @property {Array.<string>} passThrough List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n * @property {boolean} [allowDangerousHtml=false] Whether to allow `html` nodes and inject them as `raw` HTML\n * @property {Handlers} [handlers] Object mapping mdast nodes to functions handling them\n * @property {Array.<string>} [passThrough] List of custom mdast node types to pass through (keep) in hast\n * @property {Handler} [unknownHandler] Handler for all unknown nodes.\n *\n * @typedef {Record.<string, Handler>} Handlers Map of node types to handlers\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} H Handle context\n */\n\nimport {u} from 'unist-builder'\nimport {visit} from 'unist-util-visit'\nimport {pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {one} from './traverse.js'\nimport {footer} from './footer.js'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Factory to transform.\n * @param {MdastNode} tree mdast node\n * @param {Options} [options] Configuration\n * @returns {H} `h` function\n */\nfunction factory(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Object.<string, FootnoteDefinition>} */\n  const footnoteById = {}\n\n  h.dangerous = dangerous\n  h.definition = definitions(tree)\n  h.footnoteById = footnoteById\n  /** @type {Array.<string>} */\n  h.footnoteOrder = []\n  h.augment = augment\n  h.handlers = {...handlers, ...settings.handlers}\n  h.unknownHandler = settings.unknownHandler\n  h.passThrough = settings.passThrough\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return h\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   * @param {(NodeWithData|PositionLike)?} left\n   * @param {Content} right\n   * @returns {Content}\n   */\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {Data} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  function h(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n}\n\n/**\n * Transform `tree` (an mdast node) to a hast node.\n *\n * @param {MdastNode} tree mdast node\n * @param {Options} [options] Configuration\n * @returns {HastNode|null|undefined} hast node\n */\nexport function toHast(tree, options) {\n  const h = factory(tree, options)\n  const node = one(h, tree, null)\n  const foot = footer(h)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push(u('text', '\\n'), foot)\n  }\n\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n"],"names":["own","hasOwnProperty","tree","options","h","settings","dangerous","allowDangerousHtml","footnoteById","definition","definitions","footnoteOrder","augment","handlers","unknownHandler","passThrough","visit","id","String","identifier","toUpperCase","call","left","right","data","hName","type","tagName","properties","children","hProperties","hChildren","ctx","position","generated","start","pointStart","end","pointEnd","node","props","Array","isArray","factory","one","foot","footer","push","u"],"mappings":"o2BAuEA,MAAMA,EAAM,GAAGC,wBA8GR,SAAgBC,EAAMC,GAC3B,MAAMC,EAvGR,SAAiBF,EAAMC,GACrB,MAAME,EAAWF,GAAW,GACtBG,EAAYD,EAASE,qBAAsB,EAE3CC,EAAe,GAuBrB,OArBAJ,EAAEE,UAAYA,EACdF,EAAEK,WAAaC,cAAYR,GAC3BE,EAAEI,aAAeA,EAEjBJ,EAAEO,cAAgB,GAClBP,EAAEQ,QAAUA,EACZR,EAAES,SAAW,IAAIA,cAAaR,EAASQ,UACvCT,EAAEU,eAAiBT,EAASS,eAC5BV,EAAEW,YAAcV,EAASU,YAEzBC,QAAMd,EAAM,sBAAuBO,IACjC,MAAMQ,EAAKC,OAAOT,EAAWU,YAAYC,cAIpCpB,EAAIqB,KAAKb,EAAcS,KAC1BT,EAAaS,GAAMR,MAKhBL,EAQP,SAASQ,EAAQU,EAAMC,GAErB,GAAID,GAAQ,SAAUA,GAAQA,EAAKE,KAAM,CAEvC,MAAMA,EAAOF,EAAKE,KAEdA,EAAKC,QACY,YAAfF,EAAMG,OACRH,EAAQ,CACNG,KAAM,UACNC,QAAS,GACTC,WAAY,GACZC,SAAU,KAIdN,EAAMI,QAAUH,EAAKC,OAGJ,YAAfF,EAAMG,MAAsBF,EAAKM,cACnCP,EAAMK,WAAa,IAAIL,EAAMK,cAAeJ,EAAKM,cAG/C,aAAcP,GAASA,EAAMM,UAAYL,EAAKO,YAChDR,EAAMM,SAAWL,EAAKO,WAI1B,GAAIT,EAAM,CACR,MAAMU,EAAM,SAAUV,EAAOA,EAAO,CAACW,SAAUX,GAE1CY,YAAUF,KACbT,EAAMU,SAAW,CAACE,MAAOC,aAAWJ,GAAMK,IAAKC,WAASN,KAI5D,OAAOT,EAQT,SAASnB,EAAEmC,EAAMZ,EAASa,EAAOX,GAO/B,OANIY,MAAMC,QAAQF,KAChBX,EAAWW,EACXA,EAAQ,IAIH5B,EAAQ2B,EAAM,CACnBb,KAAM,UACNC,QAAAA,EACAC,WAAYY,GAAS,GACrBX,SAAUA,GAAY,MAahBc,CAAQzC,EAAMC,GAClBoC,EAAOK,MAAIxC,EAAGF,EAAM,MACpB2C,EAAOC,SAAO1C,GASpB,OAPIyC,GAIFN,EAAKV,SAASkB,KAAKC,IAAE,OAAQ,MAAOH,GAG/BJ,MAAMC,QAAQH,GAAQ,CAACb,KAAM,OAAQG,SAAUU,GAAQA"}