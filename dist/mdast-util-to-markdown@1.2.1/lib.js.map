{"version":3,"file":"lib.js","sources":["../../node_modules/mdast-util-to-markdown/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').Context} Context\n * @typedef {import('./types.js').Handle} Handle\n * @typedef {import('./types.js').Join} Join\n * @typedef {import('./types.js').Unsafe} Unsafe\n */\n\nimport {zwitch} from 'zwitch'\nimport {configure} from './configure.js'\nimport {handle} from './handle/index.js'\nimport {join} from './join.js'\nimport {unsafe} from './unsafe.js'\n\n/**\n * @param {Node} tree\n * @param {Options} [options]\n * @returns {string}\n */\nexport function toMarkdown(tree, options = {}) {\n  /** @type {Context} */\n  // @ts-expect-error: weâ€™ll add `handle` later.\n  const context = {\n    enter,\n    stack: [],\n    unsafe: [],\n    join: [],\n    handlers: {},\n    options: {},\n    indexStack: []\n  }\n\n  configure(context, {unsafe, join, handlers: handle})\n  configure(context, options)\n\n  if (context.options.tightDefinitions) {\n    configure(context, {join: [joinDefinition]})\n  }\n\n  /** @type {Handle} */\n  context.handle = zwitch('type', {\n    invalid,\n    // @ts-expect-error: hush.\n    unknown,\n    // @ts-expect-error: hush.\n    handlers: context.handlers\n  })\n\n  let result = context.handle(tree, null, context, {before: '\\n', after: '\\n'})\n\n  if (\n    result &&\n    result.charCodeAt(result.length - 1) !== 10 &&\n    result.charCodeAt(result.length - 1) !== 13\n  ) {\n    result += '\\n'\n  }\n\n  return result\n\n  /** @type {Context['enter']} */\n  function enter(name) {\n    context.stack.push(name)\n    return exit\n\n    function exit() {\n      context.stack.pop()\n    }\n  }\n}\n\n/**\n * @type {Handle}\n * @param {unknown} value\n */\nfunction invalid(value) {\n  throw new Error('Cannot handle value `' + value + '`, expected node')\n}\n\n/**\n * @type {Handle}\n * @param {Node} node\n */\nfunction unknown(node) {\n  throw new Error('Cannot handle unknown node `' + node.type + '`')\n}\n\n/** @type {Join} */\nfunction joinDefinition(left, right) {\n  // No blank line between adjacent definitions.\n  if (left.type === 'definition' && left.type === right.type) {\n    return 0\n  }\n}\n"],"names":["invalid","value","Error","unknown","node","type","joinDefinition","left","right","tree","options","context","enter","name","stack","push","pop","unsafe","join","handlers","indexStack","configure","handle","tightDefinitions","zwitch","result","before","after","charCodeAt","length"],"mappings":"41CA4EA,SAASA,EAAQC,GACf,MAAM,IAAIC,MAAM,wBAA0BD,EAAQ,oBAOpD,SAASE,EAAQC,GACf,MAAM,IAAIF,MAAM,+BAAiCE,EAAKC,KAAO,KAI/D,SAASC,EAAeC,EAAMC,GAE5B,GAAkB,eAAdD,EAAKF,MAAyBE,EAAKF,OAASG,EAAMH,KACpD,OAAO,eAxEJ,SAAoBI,EAAMC,EAAU,IAGzC,MAAMC,EAAU,CACdC,MAsCF,SAAeC,GAEb,OADAF,EAAQG,MAAMC,KAAKF,GAGnB,WACEF,EAAQG,MAAME,QA1ChBF,MAAO,GACPG,OAAQ,GACRC,KAAM,GACNC,SAAU,GACVT,QAAS,GACTU,WAAY,IAGdC,YAAUV,EAAS,QAACM,cAAQC,OAAMC,SAAUG,WAC5CD,YAAUV,EAASD,GAEfC,EAAQD,QAAQa,kBAClBF,YAAUV,EAAS,CAACO,KAAM,CAACZ,KAI7BK,EAAQW,OAASE,SAAO,OAAQ,CAC9BxB,QAAAA,EAEAG,QAAAA,EAEAgB,SAAUR,EAAQQ,WAGpB,IAAIM,EAASd,EAAQW,OAAOb,EAAM,KAAME,EAAS,CAACe,OAAQ,KAAMC,MAAO,OAUvE,OAPEF,GACyC,KAAzCA,EAAOG,WAAWH,EAAOI,OAAS,IACO,KAAzCJ,EAAOG,WAAWH,EAAOI,OAAS,KAElCJ,GAAU,MAGLA"}