{"version":3,"file":"image-reference.js","sources":["../../../../node_modules/mdast-util-to-markdown/lib/handle/image-reference.js"],"sourcesContent":["/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../types.js').Handle} Handle\n */\n\nimport {association} from '../util/association.js'\nimport {safe} from '../util/safe.js'\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @type {Handle}\n * @param {ImageReference} node\n */\nexport function imageReference(node, _, context) {\n  const type = node.referenceType\n  const exit = context.enter('imageReference')\n  let subexit = context.enter('label')\n  const alt = safe(context, node.alt, {before: '[', after: ']'})\n  let value = '![' + alt + ']'\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = context.stack\n  context.stack = []\n  subexit = context.enter('reference')\n  const reference = safe(context, association(node), {before: '[', after: ']'})\n  subexit()\n  context.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += '[' + reference + ']'\n  } else if (type !== 'shortcut') {\n    value += '[]'\n  }\n\n  return value\n}\n\n/**\n * @type {Handle}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n"],"names":["imageReference","node","_","context","type","referenceType","exit","enter","subexit","alt","safe","before","after","value","stack","reference","association","peek"],"mappings":"mKAcO,SAASA,EAAeC,EAAMC,EAAGC,GACtC,MAAMC,EAAOH,EAAKI,cACZC,EAAOH,EAAQI,MAAM,kBAC3B,IAAIC,EAAUL,EAAQI,MAAM,SAC5B,MAAME,EAAMC,OAAKP,EAASF,EAAKQ,IAAK,CAACE,OAAQ,IAAKC,MAAO,MACzD,IAAIC,EAAQ,KAAOJ,EAAM,IAEzBD,IAEA,MAAMM,EAAQX,EAAQW,MACtBX,EAAQW,MAAQ,GAChBN,EAAUL,EAAQI,MAAM,aACxB,MAAMQ,EAAYL,OAAKP,EAASa,cAAYf,GAAO,CAACU,OAAQ,IAAKC,MAAO,MAWxE,OAVAJ,IACAL,EAAQW,MAAQA,EAChBR,IAEa,SAATF,GAAoBK,GAAOA,IAAQM,EAEnB,aAATX,IACTS,GAAS,MAFTA,GAAS,IAAME,EAAY,IAKtBF,EA7BTb,EAAeiB,KAmCf,WACE,MAAO"}