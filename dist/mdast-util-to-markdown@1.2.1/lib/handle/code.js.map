{"version":3,"file":"code.js","sources":["../../../../node_modules/mdast-util-to-markdown/lib/handle/code.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Exit} Exit\n * @typedef {import('../util/indent-lines.js').Map} Map\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\nimport {indentLines} from '../util/indent-lines.js'\nimport {safe} from '../util/safe.js'\n\n/**\n * @type {Handle}\n * @param {Code} node\n */\nexport function code(node, _, context) {\n  const marker = checkFence(context)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n  /** @type {string} */\n  let value\n  /** @type {Exit} */\n  let exit\n\n  if (formatCodeAsIndented(node, context)) {\n    exit = context.enter('codeIndented')\n    value = indentLines(raw, map)\n  } else {\n    const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n    /** @type {Exit} */\n    let subexit\n    exit = context.enter('codeFenced')\n    value = sequence\n\n    if (node.lang) {\n      subexit = context.enter('codeFencedLang' + suffix)\n      value += safe(context, node.lang, {\n        before: '`',\n        after: ' ',\n        encode: ['`']\n      })\n      subexit()\n    }\n\n    if (node.lang && node.meta) {\n      subexit = context.enter('codeFencedMeta' + suffix)\n      value +=\n        ' ' +\n        safe(context, node.meta, {\n          before: ' ',\n          after: '\\n',\n          encode: ['`']\n        })\n      subexit()\n    }\n\n    value += '\\n'\n\n    if (raw) {\n      value += raw + '\\n'\n    }\n\n    value += sequence\n  }\n\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n"],"names":["map","line","_","blank","node","context","marker","checkFence","raw","value","suffix","exit","formatCodeAsIndented","enter","indentLines","sequence","repeat","Math","max","longestStreak","subexit","lang","safe","before","after","encode","meta"],"mappings":"kNAwEA,SAASA,EAAIC,EAAMC,EAAGC,GACpB,OAAQA,EAAQ,GAAK,QAAUF,SAxD1B,SAAcG,EAAMF,EAAGG,GAC5B,MAAMC,EAASC,aAAWF,GACpBG,EAAMJ,EAAKK,OAAS,GACpBC,EAAoB,MAAXJ,EAAiB,cAAgB,QAEhD,IAAIG,EAEAE,EAEJ,GAAIC,uBAAqBR,EAAMC,GAC7BM,EAAON,EAAQQ,MAAM,gBACrBJ,EAAQK,cAAYN,EAAKR,OACpB,CACL,MAAMe,EAAWT,EAAOU,OAAOC,KAAKC,IAAIC,gBAAcX,EAAKF,GAAU,EAAG,IAExE,IAAIc,EACJT,EAAON,EAAQQ,MAAM,cACrBJ,EAAQM,EAEJX,EAAKiB,OACPD,EAAUf,EAAQQ,MAAM,iBAAmBH,GAC3CD,GAASa,OAAKjB,EAASD,EAAKiB,KAAM,CAChCE,OAAQ,IACRC,MAAO,IACPC,OAAQ,CAAC,OAEXL,KAGEhB,EAAKiB,MAAQjB,EAAKsB,OACpBN,EAAUf,EAAQQ,MAAM,iBAAmBH,GAC3CD,GACE,IACAa,OAAKjB,EAASD,EAAKsB,KAAM,CACvBH,OAAQ,IACRC,MAAO,KACPC,OAAQ,CAAC,OAEbL,KAGFX,GAAS,KAELD,IACFC,GAASD,EAAM,MAGjBC,GAASM,EAIX,OADAJ,IACOF"}