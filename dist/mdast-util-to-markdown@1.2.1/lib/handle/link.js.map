{"version":3,"file":"link.js","sources":["../../../../node_modules/mdast-util-to-markdown/lib/handle/link.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Exit} Exit\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\nimport {containerPhrasing} from '../util/container-phrasing.js'\nimport {safe} from '../util/safe.js'\n\nlink.peek = linkPeek\n\n/**\n * @type {Handle}\n * @param {Link} node\n */\nexport function link(node, _, context) {\n  const quote = checkQuote(context)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n  /** @type {string} */\n  let value\n\n  if (formatLinkAsAutolink(node, context)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = context.stack\n    context.stack = []\n    exit = context.enter('autolink')\n    value =\n      '<' + containerPhrasing(node, context, {before: '<', after: '>'}) + '>'\n    exit()\n    context.stack = stack\n    return value\n  }\n\n  exit = context.enter('link')\n  subexit = context.enter('label')\n  value =\n    '[' + containerPhrasing(node, context, {before: '[', after: ']'}) + ']('\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // Or if there’s markdown whitespace or an eol, enclose.\n    /[ \\t\\r\\n]/.test(node.url)\n  ) {\n    subexit = context.enter('destinationLiteral')\n    value += '<' + safe(context, node.url, {before: '<', after: '>'}) + '>'\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = context.enter('destinationRaw')\n    value += safe(context, node.url, {\n      before: '(',\n      after: node.title ? ' ' : ')'\n    })\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = context.enter('title' + suffix)\n    value +=\n      ' ' +\n      quote +\n      safe(context, node.title, {before: quote, after: quote}) +\n      quote\n    subexit()\n  }\n\n  value += ')'\n\n  exit()\n  return value\n}\n\n/**\n * @type {Handle}\n * @param {Link} node\n */\nfunction linkPeek(node, _, context) {\n  return formatLinkAsAutolink(node, context) ? '<' : '['\n}\n"],"names":["link","node","_","context","quote","checkQuote","suffix","exit","subexit","value","formatLinkAsAutolink","stack","enter","containerPhrasing","before","after","url","title","test","safe","peek"],"mappings":"8NAiBO,SAASA,EAAKC,EAAMC,EAAGC,GAC5B,MAAMC,EAAQC,aAAWF,GACnBG,EAAmB,MAAVF,EAAgB,QAAU,aAEzC,IAAIG,EAEAC,EAEAC,EAEJ,GAAIC,uBAAqBT,EAAME,GAAU,CAEvC,MAAMQ,EAAQR,EAAQQ,MAOtB,OANAR,EAAQQ,MAAQ,GAChBJ,EAAOJ,EAAQS,MAAM,YACrBH,EACE,IAAMI,oBAAkBZ,EAAME,EAAS,CAACW,OAAQ,IAAKC,MAAO,MAAQ,IACtER,IACAJ,EAAQQ,MAAQA,EACTF,EAyCT,OAtCAF,EAAOJ,EAAQS,MAAM,QACrBJ,EAAUL,EAAQS,MAAM,SACxBH,EACE,IAAMI,oBAAkBZ,EAAME,EAAS,CAACW,OAAQ,IAAKC,MAAO,MAAQ,KACtEP,KAIIP,EAAKe,KAAOf,EAAKgB,OAEnB,YAAYC,KAAKjB,EAAKe,MAEtBR,EAAUL,EAAQS,MAAM,sBACxBH,GAAS,IAAMU,OAAKhB,EAASF,EAAKe,IAAK,CAACF,OAAQ,IAAKC,MAAO,MAAQ,MAGpEP,EAAUL,EAAQS,MAAM,kBACxBH,GAASU,OAAKhB,EAASF,EAAKe,IAAK,CAC/BF,OAAQ,IACRC,MAAOd,EAAKgB,MAAQ,IAAM,OAI9BT,IAEIP,EAAKgB,QACPT,EAAUL,EAAQS,MAAM,QAAUN,GAClCG,GACE,IACAL,EACAe,OAAKhB,EAASF,EAAKgB,MAAO,CAACH,OAAQV,EAAOW,MAAOX,IACjDA,EACFI,KAGFC,GAAS,IAETF,IACOE,EAlETT,EAAKoB,KAyEL,SAAkBnB,EAAMC,EAAGC,GACzB,OAAOO,uBAAqBT,EAAME,GAAW,IAAM"}