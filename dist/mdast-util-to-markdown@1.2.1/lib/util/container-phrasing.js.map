{"version":3,"file":"container-phrasing.js","sources":["../../../../node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js"],"sourcesContent":["/**\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').SafeOptions} SafeOptions\n * @typedef {import('../types.js').Context} Context\n */\n\n/**\n * @param {Parent} parent\n * @param {Context} context\n * @param {SafeOptions} safeOptions\n * @returns {string}\n */\nexport function containerPhrasing(parent, context, safeOptions) {\n  const indexStack = context.indexStack\n  const children = parent.children || []\n  /** @type {Array.<string>} */\n  const results = []\n  let index = -1\n  let before = safeOptions.before\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n    /** @type {string} */\n    let after\n\n    indexStack[indexStack.length - 1] = index\n\n    if (index + 1 < children.length) {\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = context.handle.handlers[children[index + 1].type]\n      if (handle && handle.peek) handle = handle.peek\n      after = handle\n        ? handle(children[index + 1], parent, context, {\n            before: '',\n            after: ''\n          }).charAt(0)\n        : ''\n    } else {\n      after = safeOptions.after\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (\n      results.length > 0 &&\n      (before === '\\r' || before === '\\n') &&\n      child.type === 'html'\n    ) {\n      results[results.length - 1] = results[results.length - 1].replace(\n        /(\\r?\\n|\\r)$/,\n        ' '\n      )\n      before = ' '\n    }\n\n    results.push(context.handle(child, parent, context, {before, after}))\n\n    before = results[results.length - 1].slice(-1)\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n"],"names":["parent","context","safeOptions","indexStack","children","results","index","before","push","length","child","after","handle","handlers","type","peek","charAt","replace","slice","pop","join"],"mappings":"oDAaO,SAA2BA,EAAQC,EAASC,GACjD,MAAMC,EAAaF,EAAQE,WACrBC,EAAWJ,EAAOI,UAAY,GAE9BC,EAAU,GAChB,IAAIC,GAAS,EACTC,EAASL,EAAYK,OAIzB,IAFAJ,EAAWK,MAAM,KAERF,EAAQF,EAASK,QAAQ,CAChC,MAAMC,EAAQN,EAASE,GAEvB,IAAIK,EAIJ,GAFAR,EAAWA,EAAWM,OAAS,GAAKH,EAEhCA,EAAQ,EAAIF,EAASK,OAAQ,CAE/B,IAAIG,EAASX,EAAQW,OAAOC,SAAST,EAASE,EAAQ,GAAGQ,MACrDF,GAAUA,EAAOG,OAAMH,EAASA,EAAOG,MAC3CJ,EAAQC,EACJA,EAAOR,EAASE,EAAQ,GAAIN,EAAQC,EAAS,CAC3CM,OAAQ,GACRI,MAAO,KACNK,OAAO,GACV,QAEJL,EAAQT,EAAYS,MAUpBN,EAAQI,OAAS,IACL,OAAXF,GAA8B,OAAXA,IACL,SAAfG,EAAMI,OAENT,EAAQA,EAAQI,OAAS,GAAKJ,EAAQA,EAAQI,OAAS,GAAGQ,QACxD,cACA,KAEFV,EAAS,KAGXF,EAAQG,KAAKP,EAAQW,OAAOF,EAAOV,EAAQC,EAAS,CAACM,OAAAA,EAAQI,MAAAA,KAE7DJ,EAASF,EAAQA,EAAQI,OAAS,GAAGS,OAAO,GAK9C,OAFAf,EAAWgB,MAEJd,EAAQe,KAAK"}