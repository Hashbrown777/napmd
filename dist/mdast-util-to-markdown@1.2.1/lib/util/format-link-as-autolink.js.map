{"version":3,"file":"format-link-as-autolink.js","sources":["../../../../node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').Context} Context\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {Context} context\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, context) {\n  const raw = toString(node)\n\n  return Boolean(\n    !context.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work) or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n"],"names":["node","context","raw","toString","Boolean","options","resourceLink","url","title","children","length","type","test"],"mappings":"gFAYO,SAA8BA,EAAMC,GACzC,MAAMC,EAAMC,WAASH,GAErB,OAAOI,SACJH,EAAQI,QAAQC,cAEfN,EAAKO,MAEJP,EAAKQ,OAENR,EAAKS,UACoB,IAAzBT,EAAKS,SAASC,QACY,SAA1BV,EAAKS,SAAS,GAAGE,OAEhBT,IAAQF,EAAKO,KAAO,UAAYL,IAAQF,EAAKO,MAE9C,oBAAoBK,KAAKZ,EAAKO,OAG7B,iBAAiBK,KAAKZ,EAAKO"}