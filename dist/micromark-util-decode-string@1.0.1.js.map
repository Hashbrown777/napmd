{"version":3,"file":"micromark-util-decode-string@1.0.1.js","sources":["../node_modules/micromark-util-decode-string/index.js"],"sourcesContent":["import {decodeEntity} from 'parse-entities/decode-entity.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n/**\n * Utility to decode markdown strings (which occur in places such as fenced\n * code info strings, destinations, labels, and titles).\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\n\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  } // Reference.\n\n  const head = $2.charCodeAt(0)\n\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n\n  return decodeEntity($2) || $0\n}\n"],"names":["characterEscapeOrReference","decode","$0","$1","$2","charCodeAt","head","hex","decodeNumericCharacterReference","slice","decodeEntity","value","replace"],"mappings":"0HAEA,MAAMA,EACJ,oEAqBF,SAASC,EAAOC,EAAIC,EAAIC,GACtB,GAAID,EAEF,OAAOA,EAKT,GAAa,KAFAC,EAAGC,WAAW,GAEV,CACf,MAAMC,EAAOF,EAAGC,WAAW,GACrBE,EAAe,MAATD,GAAyB,KAATA,EAC5B,OAAOE,kCAAgCJ,EAAGK,MAAMF,EAAM,EAAI,GAAIA,EAAM,GAAK,IAG3E,OAAOG,eAAaN,IAAOF,iBAxBtB,SAAsBS,GAC3B,OAAOA,EAAMC,QAAQZ,EAA4BC"}