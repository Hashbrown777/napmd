{"version":3,"file":"micromark@3.0.5.js","sources":["../node_modules/micromark/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Options} Options\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('micromark-util-types').Encoding} Encoding\n */\nimport {compile} from './lib/compile.js'\nimport {parse} from './lib/parse.js'\nimport {postprocess} from './lib/postprocess.js'\nimport {preprocess} from './lib/preprocess.js'\n/**\n * @param value Markdown to parse (`string` or `Buffer`).\n * @param [encoding] Character encoding to understand `value` as when itâ€™s a `Buffer` (`string`, default: `'utf8'`).\n * @param [options] Configuration\n */\n\nexport const micromark =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options) => string) &\n   *   ((value: Value, options?: Options) => string)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding} [encoding]\n   * @param {Options} [options]\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n\n    return compile(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n"],"names":["value","encoding","options","undefined","compile","postprocess","parse","document","write","preprocess"],"mappings":"u0BA4BE,SAAUA,EAAOC,EAAUC,GAMzB,MALwB,iBAAbD,IACTC,EAAUD,EACVA,OAAWE,GAGNC,UAAQF,EAARE,CACLC,cACEC,QAAMJ,GAASK,WAAWC,MAAMC,cAAAA,CAAaT,EAAOC,GAAU"}